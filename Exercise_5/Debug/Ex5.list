
Ex5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018d0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080019dc  080019dc  000119dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a00  08001a00  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001a00  08001a00  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a00  08001a00  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a00  08001a00  00011a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a04  08001a04  00011a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001a08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001a14  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001a14  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003057  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ea6  00000000  00000000  0002308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003e0  00000000  00000000  00023f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000358  00000000  00000000  00024318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015617  00000000  00000000  00024670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004719  00000000  00000000  00039c87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079a87  00000000  00000000  0003e3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b7e27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d80  00000000  00000000  000b7e7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080019c4 	.word	0x080019c4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080019c4 	.word	0x080019c4

0800014c <display7SEG.5429>:

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  void display7SEG(int num){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	f8c7 c000 	str.w	ip, [r7]
	  if (num == 0){
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	2b00      	cmp	r3, #0
 800015c:	d123      	bne.n	80001a6 <display7SEG.5429+0x5a>
		  HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 800015e:	2200      	movs	r2, #0
 8000160:	2101      	movs	r1, #1
 8000162:	48c2      	ldr	r0, [pc, #776]	; (800046c <display7SEG.5429+0x320>)
 8000164:	f001 f80e 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8000168:	2200      	movs	r2, #0
 800016a:	2102      	movs	r1, #2
 800016c:	48bf      	ldr	r0, [pc, #764]	; (800046c <display7SEG.5429+0x320>)
 800016e:	f001 f809 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000172:	2200      	movs	r2, #0
 8000174:	2104      	movs	r1, #4
 8000176:	48bd      	ldr	r0, [pc, #756]	; (800046c <display7SEG.5429+0x320>)
 8000178:	f001 f804 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 800017c:	2200      	movs	r2, #0
 800017e:	2108      	movs	r1, #8
 8000180:	48ba      	ldr	r0, [pc, #744]	; (800046c <display7SEG.5429+0x320>)
 8000182:	f000 ffff 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, RESET);
 8000186:	2200      	movs	r2, #0
 8000188:	2110      	movs	r1, #16
 800018a:	48b8      	ldr	r0, [pc, #736]	; (800046c <display7SEG.5429+0x320>)
 800018c:	f000 fffa 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 8000190:	2200      	movs	r2, #0
 8000192:	2120      	movs	r1, #32
 8000194:	48b5      	ldr	r0, [pc, #724]	; (800046c <display7SEG.5429+0x320>)
 8000196:	f000 fff5 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, SET);
 800019a:	2201      	movs	r2, #1
 800019c:	2140      	movs	r1, #64	; 0x40
 800019e:	48b3      	ldr	r0, [pc, #716]	; (800046c <display7SEG.5429+0x320>)
 80001a0:	f000 fff0 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
		  HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
		  HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
		  HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
	  }
  }
 80001a4:	e15d      	b.n	8000462 <display7SEG.5429+0x316>
	  else if (num == 1){
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b01      	cmp	r3, #1
 80001aa:	d123      	bne.n	80001f4 <display7SEG.5429+0xa8>
		  HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, SET);
 80001ac:	2201      	movs	r2, #1
 80001ae:	2101      	movs	r1, #1
 80001b0:	48ae      	ldr	r0, [pc, #696]	; (800046c <display7SEG.5429+0x320>)
 80001b2:	f000 ffe7 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 80001b6:	2200      	movs	r2, #0
 80001b8:	2102      	movs	r1, #2
 80001ba:	48ac      	ldr	r0, [pc, #688]	; (800046c <display7SEG.5429+0x320>)
 80001bc:	f000 ffe2 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	2104      	movs	r1, #4
 80001c4:	48a9      	ldr	r0, [pc, #676]	; (800046c <display7SEG.5429+0x320>)
 80001c6:	f000 ffdd 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, SET);
 80001ca:	2201      	movs	r2, #1
 80001cc:	2108      	movs	r1, #8
 80001ce:	48a7      	ldr	r0, [pc, #668]	; (800046c <display7SEG.5429+0x320>)
 80001d0:	f000 ffd8 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 80001d4:	2201      	movs	r2, #1
 80001d6:	2110      	movs	r1, #16
 80001d8:	48a4      	ldr	r0, [pc, #656]	; (800046c <display7SEG.5429+0x320>)
 80001da:	f000 ffd3 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, SET);
 80001de:	2201      	movs	r2, #1
 80001e0:	2120      	movs	r1, #32
 80001e2:	48a2      	ldr	r0, [pc, #648]	; (800046c <display7SEG.5429+0x320>)
 80001e4:	f000 ffce 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, SET);
 80001e8:	2201      	movs	r2, #1
 80001ea:	2140      	movs	r1, #64	; 0x40
 80001ec:	489f      	ldr	r0, [pc, #636]	; (800046c <display7SEG.5429+0x320>)
 80001ee:	f000 ffc9 	bl	8001184 <HAL_GPIO_WritePin>
  }
 80001f2:	e136      	b.n	8000462 <display7SEG.5429+0x316>
	  else if (num == 2){
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	2b02      	cmp	r3, #2
 80001f8:	d123      	bne.n	8000242 <display7SEG.5429+0xf6>
		  HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 80001fa:	2200      	movs	r2, #0
 80001fc:	2101      	movs	r1, #1
 80001fe:	489b      	ldr	r0, [pc, #620]	; (800046c <display7SEG.5429+0x320>)
 8000200:	f000 ffc0 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8000204:	2200      	movs	r2, #0
 8000206:	2102      	movs	r1, #2
 8000208:	4898      	ldr	r0, [pc, #608]	; (800046c <display7SEG.5429+0x320>)
 800020a:	f000 ffbb 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, SET);
 800020e:	2201      	movs	r2, #1
 8000210:	2104      	movs	r1, #4
 8000212:	4896      	ldr	r0, [pc, #600]	; (800046c <display7SEG.5429+0x320>)
 8000214:	f000 ffb6 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 8000218:	2200      	movs	r2, #0
 800021a:	2108      	movs	r1, #8
 800021c:	4893      	ldr	r0, [pc, #588]	; (800046c <display7SEG.5429+0x320>)
 800021e:	f000 ffb1 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, RESET);
 8000222:	2200      	movs	r2, #0
 8000224:	2110      	movs	r1, #16
 8000226:	4891      	ldr	r0, [pc, #580]	; (800046c <display7SEG.5429+0x320>)
 8000228:	f000 ffac 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, SET);
 800022c:	2201      	movs	r2, #1
 800022e:	2120      	movs	r1, #32
 8000230:	488e      	ldr	r0, [pc, #568]	; (800046c <display7SEG.5429+0x320>)
 8000232:	f000 ffa7 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8000236:	2200      	movs	r2, #0
 8000238:	2140      	movs	r1, #64	; 0x40
 800023a:	488c      	ldr	r0, [pc, #560]	; (800046c <display7SEG.5429+0x320>)
 800023c:	f000 ffa2 	bl	8001184 <HAL_GPIO_WritePin>
  }
 8000240:	e10f      	b.n	8000462 <display7SEG.5429+0x316>
	  else if (num == 3){
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	2b03      	cmp	r3, #3
 8000246:	d123      	bne.n	8000290 <display7SEG.5429+0x144>
		  HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8000248:	2200      	movs	r2, #0
 800024a:	2101      	movs	r1, #1
 800024c:	4887      	ldr	r0, [pc, #540]	; (800046c <display7SEG.5429+0x320>)
 800024e:	f000 ff99 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8000252:	2200      	movs	r2, #0
 8000254:	2102      	movs	r1, #2
 8000256:	4885      	ldr	r0, [pc, #532]	; (800046c <display7SEG.5429+0x320>)
 8000258:	f000 ff94 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 800025c:	2200      	movs	r2, #0
 800025e:	2104      	movs	r1, #4
 8000260:	4882      	ldr	r0, [pc, #520]	; (800046c <display7SEG.5429+0x320>)
 8000262:	f000 ff8f 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 8000266:	2200      	movs	r2, #0
 8000268:	2108      	movs	r1, #8
 800026a:	4880      	ldr	r0, [pc, #512]	; (800046c <display7SEG.5429+0x320>)
 800026c:	f000 ff8a 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 8000270:	2201      	movs	r2, #1
 8000272:	2110      	movs	r1, #16
 8000274:	487d      	ldr	r0, [pc, #500]	; (800046c <display7SEG.5429+0x320>)
 8000276:	f000 ff85 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, SET);
 800027a:	2201      	movs	r2, #1
 800027c:	2120      	movs	r1, #32
 800027e:	487b      	ldr	r0, [pc, #492]	; (800046c <display7SEG.5429+0x320>)
 8000280:	f000 ff80 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8000284:	2200      	movs	r2, #0
 8000286:	2140      	movs	r1, #64	; 0x40
 8000288:	4878      	ldr	r0, [pc, #480]	; (800046c <display7SEG.5429+0x320>)
 800028a:	f000 ff7b 	bl	8001184 <HAL_GPIO_WritePin>
  }
 800028e:	e0e8      	b.n	8000462 <display7SEG.5429+0x316>
	  else if (num == 4){
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	2b04      	cmp	r3, #4
 8000294:	d123      	bne.n	80002de <display7SEG.5429+0x192>
		  HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, SET);
 8000296:	2201      	movs	r2, #1
 8000298:	2101      	movs	r1, #1
 800029a:	4874      	ldr	r0, [pc, #464]	; (800046c <display7SEG.5429+0x320>)
 800029c:	f000 ff72 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 80002a0:	2200      	movs	r2, #0
 80002a2:	2102      	movs	r1, #2
 80002a4:	4871      	ldr	r0, [pc, #452]	; (800046c <display7SEG.5429+0x320>)
 80002a6:	f000 ff6d 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 80002aa:	2200      	movs	r2, #0
 80002ac:	2104      	movs	r1, #4
 80002ae:	486f      	ldr	r0, [pc, #444]	; (800046c <display7SEG.5429+0x320>)
 80002b0:	f000 ff68 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, SET);
 80002b4:	2201      	movs	r2, #1
 80002b6:	2108      	movs	r1, #8
 80002b8:	486c      	ldr	r0, [pc, #432]	; (800046c <display7SEG.5429+0x320>)
 80002ba:	f000 ff63 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 80002be:	2201      	movs	r2, #1
 80002c0:	2110      	movs	r1, #16
 80002c2:	486a      	ldr	r0, [pc, #424]	; (800046c <display7SEG.5429+0x320>)
 80002c4:	f000 ff5e 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 80002c8:	2200      	movs	r2, #0
 80002ca:	2120      	movs	r1, #32
 80002cc:	4867      	ldr	r0, [pc, #412]	; (800046c <display7SEG.5429+0x320>)
 80002ce:	f000 ff59 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 80002d2:	2200      	movs	r2, #0
 80002d4:	2140      	movs	r1, #64	; 0x40
 80002d6:	4865      	ldr	r0, [pc, #404]	; (800046c <display7SEG.5429+0x320>)
 80002d8:	f000 ff54 	bl	8001184 <HAL_GPIO_WritePin>
  }
 80002dc:	e0c1      	b.n	8000462 <display7SEG.5429+0x316>
	  else if (num == 5){
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	2b05      	cmp	r3, #5
 80002e2:	d123      	bne.n	800032c <display7SEG.5429+0x1e0>
		  HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 80002e4:	2200      	movs	r2, #0
 80002e6:	2101      	movs	r1, #1
 80002e8:	4860      	ldr	r0, [pc, #384]	; (800046c <display7SEG.5429+0x320>)
 80002ea:	f000 ff4b 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, SET);
 80002ee:	2201      	movs	r2, #1
 80002f0:	2102      	movs	r1, #2
 80002f2:	485e      	ldr	r0, [pc, #376]	; (800046c <display7SEG.5429+0x320>)
 80002f4:	f000 ff46 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 80002f8:	2200      	movs	r2, #0
 80002fa:	2104      	movs	r1, #4
 80002fc:	485b      	ldr	r0, [pc, #364]	; (800046c <display7SEG.5429+0x320>)
 80002fe:	f000 ff41 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 8000302:	2200      	movs	r2, #0
 8000304:	2108      	movs	r1, #8
 8000306:	4859      	ldr	r0, [pc, #356]	; (800046c <display7SEG.5429+0x320>)
 8000308:	f000 ff3c 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 800030c:	2201      	movs	r2, #1
 800030e:	2110      	movs	r1, #16
 8000310:	4856      	ldr	r0, [pc, #344]	; (800046c <display7SEG.5429+0x320>)
 8000312:	f000 ff37 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 8000316:	2200      	movs	r2, #0
 8000318:	2120      	movs	r1, #32
 800031a:	4854      	ldr	r0, [pc, #336]	; (800046c <display7SEG.5429+0x320>)
 800031c:	f000 ff32 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8000320:	2200      	movs	r2, #0
 8000322:	2140      	movs	r1, #64	; 0x40
 8000324:	4851      	ldr	r0, [pc, #324]	; (800046c <display7SEG.5429+0x320>)
 8000326:	f000 ff2d 	bl	8001184 <HAL_GPIO_WritePin>
  }
 800032a:	e09a      	b.n	8000462 <display7SEG.5429+0x316>
	  else if (num == 6){
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	2b06      	cmp	r3, #6
 8000330:	d123      	bne.n	800037a <display7SEG.5429+0x22e>
		  HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8000332:	2200      	movs	r2, #0
 8000334:	2101      	movs	r1, #1
 8000336:	484d      	ldr	r0, [pc, #308]	; (800046c <display7SEG.5429+0x320>)
 8000338:	f000 ff24 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, SET);
 800033c:	2201      	movs	r2, #1
 800033e:	2102      	movs	r1, #2
 8000340:	484a      	ldr	r0, [pc, #296]	; (800046c <display7SEG.5429+0x320>)
 8000342:	f000 ff1f 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000346:	2200      	movs	r2, #0
 8000348:	2104      	movs	r1, #4
 800034a:	4848      	ldr	r0, [pc, #288]	; (800046c <display7SEG.5429+0x320>)
 800034c:	f000 ff1a 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 8000350:	2200      	movs	r2, #0
 8000352:	2108      	movs	r1, #8
 8000354:	4845      	ldr	r0, [pc, #276]	; (800046c <display7SEG.5429+0x320>)
 8000356:	f000 ff15 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, RESET);
 800035a:	2200      	movs	r2, #0
 800035c:	2110      	movs	r1, #16
 800035e:	4843      	ldr	r0, [pc, #268]	; (800046c <display7SEG.5429+0x320>)
 8000360:	f000 ff10 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	2120      	movs	r1, #32
 8000368:	4840      	ldr	r0, [pc, #256]	; (800046c <display7SEG.5429+0x320>)
 800036a:	f000 ff0b 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 800036e:	2200      	movs	r2, #0
 8000370:	2140      	movs	r1, #64	; 0x40
 8000372:	483e      	ldr	r0, [pc, #248]	; (800046c <display7SEG.5429+0x320>)
 8000374:	f000 ff06 	bl	8001184 <HAL_GPIO_WritePin>
  }
 8000378:	e073      	b.n	8000462 <display7SEG.5429+0x316>
	  else if (num == 7){
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	2b07      	cmp	r3, #7
 800037e:	d123      	bne.n	80003c8 <display7SEG.5429+0x27c>
		  HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8000380:	2200      	movs	r2, #0
 8000382:	2101      	movs	r1, #1
 8000384:	4839      	ldr	r0, [pc, #228]	; (800046c <display7SEG.5429+0x320>)
 8000386:	f000 fefd 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 800038a:	2200      	movs	r2, #0
 800038c:	2102      	movs	r1, #2
 800038e:	4837      	ldr	r0, [pc, #220]	; (800046c <display7SEG.5429+0x320>)
 8000390:	f000 fef8 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000394:	2200      	movs	r2, #0
 8000396:	2104      	movs	r1, #4
 8000398:	4834      	ldr	r0, [pc, #208]	; (800046c <display7SEG.5429+0x320>)
 800039a:	f000 fef3 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, SET);
 800039e:	2201      	movs	r2, #1
 80003a0:	2108      	movs	r1, #8
 80003a2:	4832      	ldr	r0, [pc, #200]	; (800046c <display7SEG.5429+0x320>)
 80003a4:	f000 feee 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 80003a8:	2201      	movs	r2, #1
 80003aa:	2110      	movs	r1, #16
 80003ac:	482f      	ldr	r0, [pc, #188]	; (800046c <display7SEG.5429+0x320>)
 80003ae:	f000 fee9 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, SET);
 80003b2:	2201      	movs	r2, #1
 80003b4:	2120      	movs	r1, #32
 80003b6:	482d      	ldr	r0, [pc, #180]	; (800046c <display7SEG.5429+0x320>)
 80003b8:	f000 fee4 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, SET);
 80003bc:	2201      	movs	r2, #1
 80003be:	2140      	movs	r1, #64	; 0x40
 80003c0:	482a      	ldr	r0, [pc, #168]	; (800046c <display7SEG.5429+0x320>)
 80003c2:	f000 fedf 	bl	8001184 <HAL_GPIO_WritePin>
  }
 80003c6:	e04c      	b.n	8000462 <display7SEG.5429+0x316>
	  else if (num == 8){
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	2b08      	cmp	r3, #8
 80003cc:	d123      	bne.n	8000416 <display7SEG.5429+0x2ca>
		  HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 80003ce:	2200      	movs	r2, #0
 80003d0:	2101      	movs	r1, #1
 80003d2:	4826      	ldr	r0, [pc, #152]	; (800046c <display7SEG.5429+0x320>)
 80003d4:	f000 fed6 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 80003d8:	2200      	movs	r2, #0
 80003da:	2102      	movs	r1, #2
 80003dc:	4823      	ldr	r0, [pc, #140]	; (800046c <display7SEG.5429+0x320>)
 80003de:	f000 fed1 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 80003e2:	2200      	movs	r2, #0
 80003e4:	2104      	movs	r1, #4
 80003e6:	4821      	ldr	r0, [pc, #132]	; (800046c <display7SEG.5429+0x320>)
 80003e8:	f000 fecc 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 80003ec:	2200      	movs	r2, #0
 80003ee:	2108      	movs	r1, #8
 80003f0:	481e      	ldr	r0, [pc, #120]	; (800046c <display7SEG.5429+0x320>)
 80003f2:	f000 fec7 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, RESET);
 80003f6:	2200      	movs	r2, #0
 80003f8:	2110      	movs	r1, #16
 80003fa:	481c      	ldr	r0, [pc, #112]	; (800046c <display7SEG.5429+0x320>)
 80003fc:	f000 fec2 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 8000400:	2200      	movs	r2, #0
 8000402:	2120      	movs	r1, #32
 8000404:	4819      	ldr	r0, [pc, #100]	; (800046c <display7SEG.5429+0x320>)
 8000406:	f000 febd 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 800040a:	2200      	movs	r2, #0
 800040c:	2140      	movs	r1, #64	; 0x40
 800040e:	4817      	ldr	r0, [pc, #92]	; (800046c <display7SEG.5429+0x320>)
 8000410:	f000 feb8 	bl	8001184 <HAL_GPIO_WritePin>
  }
 8000414:	e025      	b.n	8000462 <display7SEG.5429+0x316>
	  else if (num == 9){
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	2b09      	cmp	r3, #9
 800041a:	d122      	bne.n	8000462 <display7SEG.5429+0x316>
		  HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 800041c:	2200      	movs	r2, #0
 800041e:	2101      	movs	r1, #1
 8000420:	4812      	ldr	r0, [pc, #72]	; (800046c <display7SEG.5429+0x320>)
 8000422:	f000 feaf 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8000426:	2200      	movs	r2, #0
 8000428:	2102      	movs	r1, #2
 800042a:	4810      	ldr	r0, [pc, #64]	; (800046c <display7SEG.5429+0x320>)
 800042c:	f000 feaa 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	2104      	movs	r1, #4
 8000434:	480d      	ldr	r0, [pc, #52]	; (800046c <display7SEG.5429+0x320>)
 8000436:	f000 fea5 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 800043a:	2200      	movs	r2, #0
 800043c:	2108      	movs	r1, #8
 800043e:	480b      	ldr	r0, [pc, #44]	; (800046c <display7SEG.5429+0x320>)
 8000440:	f000 fea0 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 8000444:	2201      	movs	r2, #1
 8000446:	2110      	movs	r1, #16
 8000448:	4808      	ldr	r0, [pc, #32]	; (800046c <display7SEG.5429+0x320>)
 800044a:	f000 fe9b 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 800044e:	2200      	movs	r2, #0
 8000450:	2120      	movs	r1, #32
 8000452:	4806      	ldr	r0, [pc, #24]	; (800046c <display7SEG.5429+0x320>)
 8000454:	f000 fe96 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8000458:	2200      	movs	r2, #0
 800045a:	2140      	movs	r1, #64	; 0x40
 800045c:	4803      	ldr	r0, [pc, #12]	; (800046c <display7SEG.5429+0x320>)
 800045e:	f000 fe91 	bl	8001184 <HAL_GPIO_WritePin>
  }
 8000462:	bf00      	nop
 8000464:	3708      	adds	r7, #8
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	40010c00 	.word	0x40010c00

08000470 <main>:
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
int main(void)
 8000476:	f107 0310 	add.w	r3, r7, #16
 800047a:	603b      	str	r3, [r7, #0]
  HAL_Init();
 800047c:	f000 fb9e 	bl	8000bbc <HAL_Init>
  SystemClock_Config();
 8000480:	f000 fa80 	bl	8000984 <SystemClock_Config>
  MX_GPIO_Init();
 8000484:	f000 faba 	bl	80009fc <MX_GPIO_Init>
		  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, SET);
		  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, RESET);
		  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, RESET);
	  }
  }
  int counter = 10;
 8000488:	230a      	movs	r3, #10
 800048a:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */
	  if (counter >5){
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	2b05      	cmp	r3, #5
 8000490:	dd4c      	ble.n	800052c <main+0xbc>
		  HAL_GPIO_WritePin(Red1_GPIO_Port, Red1_Pin, RESET);
 8000492:	2200      	movs	r2, #0
 8000494:	2102      	movs	r1, #2
 8000496:	4852      	ldr	r0, [pc, #328]	; (80005e0 <main+0x170>)
 8000498:	f000 fe74 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Yellow1_GPIO_Port, Yellow1_Pin, SET);
 800049c:	2201      	movs	r2, #1
 800049e:	2104      	movs	r1, #4
 80004a0:	484f      	ldr	r0, [pc, #316]	; (80005e0 <main+0x170>)
 80004a2:	f000 fe6f 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Green1_GPIO_Port, Green1_Pin, SET);
 80004a6:	2201      	movs	r2, #1
 80004a8:	2108      	movs	r1, #8
 80004aa:	484d      	ldr	r0, [pc, #308]	; (80005e0 <main+0x170>)
 80004ac:	f000 fe6a 	bl	8001184 <HAL_GPIO_WritePin>
		  display7SEG(counter-6);
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	3b06      	subs	r3, #6
 80004b4:	463a      	mov	r2, r7
 80004b6:	4694      	mov	ip, r2
 80004b8:	4618      	mov	r0, r3
 80004ba:	f7ff fe47 	bl	800014c <display7SEG.5429>
		  if (counter >7){
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	2b07      	cmp	r3, #7
 80004c2:	dd16      	ble.n	80004f2 <main+0x82>
			  HAL_GPIO_WritePin(Red2_GPIO_Port, Red2_Pin, SET);
 80004c4:	2201      	movs	r2, #1
 80004c6:	2110      	movs	r1, #16
 80004c8:	4845      	ldr	r0, [pc, #276]	; (80005e0 <main+0x170>)
 80004ca:	f000 fe5b 	bl	8001184 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(Yellow2_GPIO_Port, Yellow2_Pin, SET);
 80004ce:	2201      	movs	r2, #1
 80004d0:	2120      	movs	r1, #32
 80004d2:	4843      	ldr	r0, [pc, #268]	; (80005e0 <main+0x170>)
 80004d4:	f000 fe56 	bl	8001184 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(Green2_GPIO_Port, Green2_Pin, RESET);
 80004d8:	2200      	movs	r2, #0
 80004da:	2140      	movs	r1, #64	; 0x40
 80004dc:	4840      	ldr	r0, [pc, #256]	; (80005e0 <main+0x170>)
 80004de:	f000 fe51 	bl	8001184 <HAL_GPIO_WritePin>
			  display7SEG1(counter-8);
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	3b08      	subs	r3, #8
 80004e6:	463a      	mov	r2, r7
 80004e8:	4694      	mov	ip, r2
 80004ea:	4618      	mov	r0, r3
 80004ec:	f000 f87a 	bl	80005e4 <display7SEG1.5432>
 80004f0:	e018      	b.n	8000524 <main+0xb4>
		  }
		  else if (counter > 5){
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	2b05      	cmp	r3, #5
 80004f6:	dd15      	ble.n	8000524 <main+0xb4>
			  HAL_GPIO_WritePin(Red2_GPIO_Port, Red2_Pin, SET);
 80004f8:	2201      	movs	r2, #1
 80004fa:	2110      	movs	r1, #16
 80004fc:	4838      	ldr	r0, [pc, #224]	; (80005e0 <main+0x170>)
 80004fe:	f000 fe41 	bl	8001184 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(Yellow2_GPIO_Port, Yellow2_Pin, RESET);
 8000502:	2200      	movs	r2, #0
 8000504:	2120      	movs	r1, #32
 8000506:	4836      	ldr	r0, [pc, #216]	; (80005e0 <main+0x170>)
 8000508:	f000 fe3c 	bl	8001184 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(Green2_GPIO_Port, Green2_Pin, SET);
 800050c:	2201      	movs	r2, #1
 800050e:	2140      	movs	r1, #64	; 0x40
 8000510:	4833      	ldr	r0, [pc, #204]	; (80005e0 <main+0x170>)
 8000512:	f000 fe37 	bl	8001184 <HAL_GPIO_WritePin>
			  display7SEG1(counter - 6);
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	3b06      	subs	r3, #6
 800051a:	463a      	mov	r2, r7
 800051c:	4694      	mov	ip, r2
 800051e:	4618      	mov	r0, r3
 8000520:	f000 f860 	bl	80005e4 <display7SEG1.5432>
		  }
		  counter -=1;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	3b01      	subs	r3, #1
 8000528:	607b      	str	r3, [r7, #4]
 800052a:	e04e      	b.n	80005ca <main+0x15a>


	  }
	  else if (counter >0){
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2b00      	cmp	r3, #0
 8000530:	dd4b      	ble.n	80005ca <main+0x15a>
		  HAL_GPIO_WritePin(Red2_GPIO_Port, Red2_Pin, RESET);
 8000532:	2200      	movs	r2, #0
 8000534:	2110      	movs	r1, #16
 8000536:	482a      	ldr	r0, [pc, #168]	; (80005e0 <main+0x170>)
 8000538:	f000 fe24 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Yellow2_GPIO_Port, Yellow2_Pin, SET);
 800053c:	2201      	movs	r2, #1
 800053e:	2120      	movs	r1, #32
 8000540:	4827      	ldr	r0, [pc, #156]	; (80005e0 <main+0x170>)
 8000542:	f000 fe1f 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Green2_GPIO_Port, Green2_Pin, SET);
 8000546:	2201      	movs	r2, #1
 8000548:	2140      	movs	r1, #64	; 0x40
 800054a:	4825      	ldr	r0, [pc, #148]	; (80005e0 <main+0x170>)
 800054c:	f000 fe1a 	bl	8001184 <HAL_GPIO_WritePin>
		  display7SEG1(counter-1);
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	3b01      	subs	r3, #1
 8000554:	463a      	mov	r2, r7
 8000556:	4694      	mov	ip, r2
 8000558:	4618      	mov	r0, r3
 800055a:	f000 f843 	bl	80005e4 <display7SEG1.5432>
		  if (counter > 2){
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	2b02      	cmp	r3, #2
 8000562:	dd16      	ble.n	8000592 <main+0x122>
			  HAL_GPIO_WritePin(Red1_GPIO_Port, Red1_Pin, SET);
 8000564:	2201      	movs	r2, #1
 8000566:	2102      	movs	r1, #2
 8000568:	481d      	ldr	r0, [pc, #116]	; (80005e0 <main+0x170>)
 800056a:	f000 fe0b 	bl	8001184 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(Yellow1_GPIO_Port, Yellow1_Pin, SET);
 800056e:	2201      	movs	r2, #1
 8000570:	2104      	movs	r1, #4
 8000572:	481b      	ldr	r0, [pc, #108]	; (80005e0 <main+0x170>)
 8000574:	f000 fe06 	bl	8001184 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(Green1_GPIO_Port, Green1_Pin, RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	2108      	movs	r1, #8
 800057c:	4818      	ldr	r0, [pc, #96]	; (80005e0 <main+0x170>)
 800057e:	f000 fe01 	bl	8001184 <HAL_GPIO_WritePin>
			  display7SEG(counter - 3);
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	3b03      	subs	r3, #3
 8000586:	463a      	mov	r2, r7
 8000588:	4694      	mov	ip, r2
 800058a:	4618      	mov	r0, r3
 800058c:	f7ff fdde 	bl	800014c <display7SEG.5429>
 8000590:	e018      	b.n	80005c4 <main+0x154>
		  }
		  else if (counter >0){
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	2b00      	cmp	r3, #0
 8000596:	dd15      	ble.n	80005c4 <main+0x154>
			  HAL_GPIO_WritePin(Red1_GPIO_Port, Red1_Pin, SET);
 8000598:	2201      	movs	r2, #1
 800059a:	2102      	movs	r1, #2
 800059c:	4810      	ldr	r0, [pc, #64]	; (80005e0 <main+0x170>)
 800059e:	f000 fdf1 	bl	8001184 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(Yellow1_GPIO_Port, Yellow1_Pin, RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2104      	movs	r1, #4
 80005a6:	480e      	ldr	r0, [pc, #56]	; (80005e0 <main+0x170>)
 80005a8:	f000 fdec 	bl	8001184 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(Green1_GPIO_Port, Green1_Pin, SET);
 80005ac:	2201      	movs	r2, #1
 80005ae:	2108      	movs	r1, #8
 80005b0:	480b      	ldr	r0, [pc, #44]	; (80005e0 <main+0x170>)
 80005b2:	f000 fde7 	bl	8001184 <HAL_GPIO_WritePin>
			  display7SEG(counter-1);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	3b01      	subs	r3, #1
 80005ba:	463a      	mov	r2, r7
 80005bc:	4694      	mov	ip, r2
 80005be:	4618      	mov	r0, r3
 80005c0:	f7ff fdc4 	bl	800014c <display7SEG.5429>
		  }
		  counter -= 1;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	3b01      	subs	r3, #1
 80005c8:	607b      	str	r3, [r7, #4]
	  }
	  if (counter == 0) counter =10;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d101      	bne.n	80005d4 <main+0x164>
 80005d0:	230a      	movs	r3, #10
 80005d2:	607b      	str	r3, [r7, #4]
	  HAL_Delay(1000);
 80005d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d8:	f000 fb52 	bl	8000c80 <HAL_Delay>
	  if (counter >5){
 80005dc:	e756      	b.n	800048c <main+0x1c>
 80005de:	bf00      	nop
 80005e0:	40010800 	.word	0x40010800

080005e4 <display7SEG1.5432>:
  void display7SEG1(int num){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	f8c7 c000 	str.w	ip, [r7]
	  if (num == 0){
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d129      	bne.n	800064a <display7SEG1.5432+0x66>
		  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2180      	movs	r1, #128	; 0x80
 80005fa:	48c8      	ldr	r0, [pc, #800]	; (800091c <display7SEG1.5432+0x338>)
 80005fc:	f000 fdc2 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, RESET);
 8000600:	2200      	movs	r2, #0
 8000602:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000606:	48c5      	ldr	r0, [pc, #788]	; (800091c <display7SEG1.5432+0x338>)
 8000608:	f000 fdbc 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, RESET);
 800060c:	2200      	movs	r2, #0
 800060e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000612:	48c2      	ldr	r0, [pc, #776]	; (800091c <display7SEG1.5432+0x338>)
 8000614:	f000 fdb6 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800061e:	48bf      	ldr	r0, [pc, #764]	; (800091c <display7SEG1.5432+0x338>)
 8000620:	f000 fdb0 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800062a:	48bc      	ldr	r0, [pc, #752]	; (800091c <display7SEG1.5432+0x338>)
 800062c:	f000 fdaa 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000636:	48b9      	ldr	r0, [pc, #740]	; (800091c <display7SEG1.5432+0x338>)
 8000638:	f000 fda4 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, SET);
 800063c:	2201      	movs	r2, #1
 800063e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000642:	48b6      	ldr	r0, [pc, #728]	; (800091c <display7SEG1.5432+0x338>)
 8000644:	f000 fd9e 	bl	8001184 <HAL_GPIO_WritePin>
  }
 8000648:	e196      	b.n	8000978 <display7SEG1.5432+0x394>
	  else if (num == 1){
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2b01      	cmp	r3, #1
 800064e:	d129      	bne.n	80006a4 <display7SEG1.5432+0xc0>
		  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, SET);
 8000650:	2201      	movs	r2, #1
 8000652:	2180      	movs	r1, #128	; 0x80
 8000654:	48b1      	ldr	r0, [pc, #708]	; (800091c <display7SEG1.5432+0x338>)
 8000656:	f000 fd95 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000660:	48ae      	ldr	r0, [pc, #696]	; (800091c <display7SEG1.5432+0x338>)
 8000662:	f000 fd8f 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 7100 	mov.w	r1, #512	; 0x200
 800066c:	48ab      	ldr	r0, [pc, #684]	; (800091c <display7SEG1.5432+0x338>)
 800066e:	f000 fd89 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, SET);
 8000672:	2201      	movs	r2, #1
 8000674:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000678:	48a8      	ldr	r0, [pc, #672]	; (800091c <display7SEG1.5432+0x338>)
 800067a:	f000 fd83 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, SET);
 800067e:	2201      	movs	r2, #1
 8000680:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000684:	48a5      	ldr	r0, [pc, #660]	; (800091c <display7SEG1.5432+0x338>)
 8000686:	f000 fd7d 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, SET);
 800068a:	2201      	movs	r2, #1
 800068c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000690:	48a2      	ldr	r0, [pc, #648]	; (800091c <display7SEG1.5432+0x338>)
 8000692:	f000 fd77 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, SET);
 8000696:	2201      	movs	r2, #1
 8000698:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800069c:	489f      	ldr	r0, [pc, #636]	; (800091c <display7SEG1.5432+0x338>)
 800069e:	f000 fd71 	bl	8001184 <HAL_GPIO_WritePin>
  }
 80006a2:	e169      	b.n	8000978 <display7SEG1.5432+0x394>
	  else if (num == 2){
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2b02      	cmp	r3, #2
 80006a8:	d129      	bne.n	80006fe <display7SEG1.5432+0x11a>
		  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2180      	movs	r1, #128	; 0x80
 80006ae:	489b      	ldr	r0, [pc, #620]	; (800091c <display7SEG1.5432+0x338>)
 80006b0:	f000 fd68 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ba:	4898      	ldr	r0, [pc, #608]	; (800091c <display7SEG1.5432+0x338>)
 80006bc:	f000 fd62 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, SET);
 80006c0:	2201      	movs	r2, #1
 80006c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006c6:	4895      	ldr	r0, [pc, #596]	; (800091c <display7SEG1.5432+0x338>)
 80006c8:	f000 fd5c 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d2:	4892      	ldr	r0, [pc, #584]	; (800091c <display7SEG1.5432+0x338>)
 80006d4:	f000 fd56 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006de:	488f      	ldr	r0, [pc, #572]	; (800091c <display7SEG1.5432+0x338>)
 80006e0:	f000 fd50 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, SET);
 80006e4:	2201      	movs	r2, #1
 80006e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ea:	488c      	ldr	r0, [pc, #560]	; (800091c <display7SEG1.5432+0x338>)
 80006ec:	f000 fd4a 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006f6:	4889      	ldr	r0, [pc, #548]	; (800091c <display7SEG1.5432+0x338>)
 80006f8:	f000 fd44 	bl	8001184 <HAL_GPIO_WritePin>
  }
 80006fc:	e13c      	b.n	8000978 <display7SEG1.5432+0x394>
	  else if (num == 3){
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2b03      	cmp	r3, #3
 8000702:	d129      	bne.n	8000758 <display7SEG1.5432+0x174>
		  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	2180      	movs	r1, #128	; 0x80
 8000708:	4884      	ldr	r0, [pc, #528]	; (800091c <display7SEG1.5432+0x338>)
 800070a:	f000 fd3b 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000714:	4881      	ldr	r0, [pc, #516]	; (800091c <display7SEG1.5432+0x338>)
 8000716:	f000 fd35 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000720:	487e      	ldr	r0, [pc, #504]	; (800091c <display7SEG1.5432+0x338>)
 8000722:	f000 fd2f 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800072c:	487b      	ldr	r0, [pc, #492]	; (800091c <display7SEG1.5432+0x338>)
 800072e:	f000 fd29 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, SET);
 8000732:	2201      	movs	r2, #1
 8000734:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000738:	4878      	ldr	r0, [pc, #480]	; (800091c <display7SEG1.5432+0x338>)
 800073a:	f000 fd23 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, SET);
 800073e:	2201      	movs	r2, #1
 8000740:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000744:	4875      	ldr	r0, [pc, #468]	; (800091c <display7SEG1.5432+0x338>)
 8000746:	f000 fd1d 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000750:	4872      	ldr	r0, [pc, #456]	; (800091c <display7SEG1.5432+0x338>)
 8000752:	f000 fd17 	bl	8001184 <HAL_GPIO_WritePin>
  }
 8000756:	e10f      	b.n	8000978 <display7SEG1.5432+0x394>
	  else if (num == 4){
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2b04      	cmp	r3, #4
 800075c:	d129      	bne.n	80007b2 <display7SEG1.5432+0x1ce>
		  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, SET);
 800075e:	2201      	movs	r2, #1
 8000760:	2180      	movs	r1, #128	; 0x80
 8000762:	486e      	ldr	r0, [pc, #440]	; (800091c <display7SEG1.5432+0x338>)
 8000764:	f000 fd0e 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800076e:	486b      	ldr	r0, [pc, #428]	; (800091c <display7SEG1.5432+0x338>)
 8000770:	f000 fd08 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, RESET);
 8000774:	2200      	movs	r2, #0
 8000776:	f44f 7100 	mov.w	r1, #512	; 0x200
 800077a:	4868      	ldr	r0, [pc, #416]	; (800091c <display7SEG1.5432+0x338>)
 800077c:	f000 fd02 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, SET);
 8000780:	2201      	movs	r2, #1
 8000782:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000786:	4865      	ldr	r0, [pc, #404]	; (800091c <display7SEG1.5432+0x338>)
 8000788:	f000 fcfc 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, SET);
 800078c:	2201      	movs	r2, #1
 800078e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000792:	4862      	ldr	r0, [pc, #392]	; (800091c <display7SEG1.5432+0x338>)
 8000794:	f000 fcf6 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800079e:	485f      	ldr	r0, [pc, #380]	; (800091c <display7SEG1.5432+0x338>)
 80007a0:	f000 fcf0 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007aa:	485c      	ldr	r0, [pc, #368]	; (800091c <display7SEG1.5432+0x338>)
 80007ac:	f000 fcea 	bl	8001184 <HAL_GPIO_WritePin>
  }
 80007b0:	e0e2      	b.n	8000978 <display7SEG1.5432+0x394>
	  else if (num == 5){
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2b05      	cmp	r3, #5
 80007b6:	d129      	bne.n	800080c <display7SEG1.5432+0x228>
		  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, RESET);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2180      	movs	r1, #128	; 0x80
 80007bc:	4857      	ldr	r0, [pc, #348]	; (800091c <display7SEG1.5432+0x338>)
 80007be:	f000 fce1 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, SET);
 80007c2:	2201      	movs	r2, #1
 80007c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007c8:	4854      	ldr	r0, [pc, #336]	; (800091c <display7SEG1.5432+0x338>)
 80007ca:	f000 fcdb 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007d4:	4851      	ldr	r0, [pc, #324]	; (800091c <display7SEG1.5432+0x338>)
 80007d6:	f000 fcd5 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007e0:	484e      	ldr	r0, [pc, #312]	; (800091c <display7SEG1.5432+0x338>)
 80007e2:	f000 fccf 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, SET);
 80007e6:	2201      	movs	r2, #1
 80007e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007ec:	484b      	ldr	r0, [pc, #300]	; (800091c <display7SEG1.5432+0x338>)
 80007ee:	f000 fcc9 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007f8:	4848      	ldr	r0, [pc, #288]	; (800091c <display7SEG1.5432+0x338>)
 80007fa:	f000 fcc3 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000804:	4845      	ldr	r0, [pc, #276]	; (800091c <display7SEG1.5432+0x338>)
 8000806:	f000 fcbd 	bl	8001184 <HAL_GPIO_WritePin>
  }
 800080a:	e0b5      	b.n	8000978 <display7SEG1.5432+0x394>
	  else if (num == 6){
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b06      	cmp	r3, #6
 8000810:	d129      	bne.n	8000866 <display7SEG1.5432+0x282>
		  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2180      	movs	r1, #128	; 0x80
 8000816:	4841      	ldr	r0, [pc, #260]	; (800091c <display7SEG1.5432+0x338>)
 8000818:	f000 fcb4 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, SET);
 800081c:	2201      	movs	r2, #1
 800081e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000822:	483e      	ldr	r0, [pc, #248]	; (800091c <display7SEG1.5432+0x338>)
 8000824:	f000 fcae 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800082e:	483b      	ldr	r0, [pc, #236]	; (800091c <display7SEG1.5432+0x338>)
 8000830:	f000 fca8 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800083a:	4838      	ldr	r0, [pc, #224]	; (800091c <display7SEG1.5432+0x338>)
 800083c:	f000 fca2 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000846:	4835      	ldr	r0, [pc, #212]	; (800091c <display7SEG1.5432+0x338>)
 8000848:	f000 fc9c 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000852:	4832      	ldr	r0, [pc, #200]	; (800091c <display7SEG1.5432+0x338>)
 8000854:	f000 fc96 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800085e:	482f      	ldr	r0, [pc, #188]	; (800091c <display7SEG1.5432+0x338>)
 8000860:	f000 fc90 	bl	8001184 <HAL_GPIO_WritePin>
  }
 8000864:	e088      	b.n	8000978 <display7SEG1.5432+0x394>
	  else if (num == 7){
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2b07      	cmp	r3, #7
 800086a:	d129      	bne.n	80008c0 <display7SEG1.5432+0x2dc>
		  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	2180      	movs	r1, #128	; 0x80
 8000870:	482a      	ldr	r0, [pc, #168]	; (800091c <display7SEG1.5432+0x338>)
 8000872:	f000 fc87 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	f44f 7180 	mov.w	r1, #256	; 0x100
 800087c:	4827      	ldr	r0, [pc, #156]	; (800091c <display7SEG1.5432+0x338>)
 800087e:	f000 fc81 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000888:	4824      	ldr	r0, [pc, #144]	; (800091c <display7SEG1.5432+0x338>)
 800088a:	f000 fc7b 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, SET);
 800088e:	2201      	movs	r2, #1
 8000890:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000894:	4821      	ldr	r0, [pc, #132]	; (800091c <display7SEG1.5432+0x338>)
 8000896:	f000 fc75 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, SET);
 800089a:	2201      	movs	r2, #1
 800089c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008a0:	481e      	ldr	r0, [pc, #120]	; (800091c <display7SEG1.5432+0x338>)
 80008a2:	f000 fc6f 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, SET);
 80008a6:	2201      	movs	r2, #1
 80008a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008ac:	481b      	ldr	r0, [pc, #108]	; (800091c <display7SEG1.5432+0x338>)
 80008ae:	f000 fc69 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, SET);
 80008b2:	2201      	movs	r2, #1
 80008b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008b8:	4818      	ldr	r0, [pc, #96]	; (800091c <display7SEG1.5432+0x338>)
 80008ba:	f000 fc63 	bl	8001184 <HAL_GPIO_WritePin>
  }
 80008be:	e05b      	b.n	8000978 <display7SEG1.5432+0x394>
	  else if (num == 8){
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2b08      	cmp	r3, #8
 80008c4:	d12c      	bne.n	8000920 <display7SEG1.5432+0x33c>
		  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2180      	movs	r1, #128	; 0x80
 80008ca:	4814      	ldr	r0, [pc, #80]	; (800091c <display7SEG1.5432+0x338>)
 80008cc:	f000 fc5a 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, RESET);
 80008d0:	2200      	movs	r2, #0
 80008d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008d6:	4811      	ldr	r0, [pc, #68]	; (800091c <display7SEG1.5432+0x338>)
 80008d8:	f000 fc54 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, RESET);
 80008dc:	2200      	movs	r2, #0
 80008de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008e2:	480e      	ldr	r0, [pc, #56]	; (800091c <display7SEG1.5432+0x338>)
 80008e4:	f000 fc4e 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, RESET);
 80008e8:	2200      	movs	r2, #0
 80008ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008ee:	480b      	ldr	r0, [pc, #44]	; (800091c <display7SEG1.5432+0x338>)
 80008f0:	f000 fc48 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, RESET);
 80008f4:	2200      	movs	r2, #0
 80008f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008fa:	4808      	ldr	r0, [pc, #32]	; (800091c <display7SEG1.5432+0x338>)
 80008fc:	f000 fc42 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <display7SEG1.5432+0x338>)
 8000908:	f000 fc3c 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000912:	4802      	ldr	r0, [pc, #8]	; (800091c <display7SEG1.5432+0x338>)
 8000914:	f000 fc36 	bl	8001184 <HAL_GPIO_WritePin>
  }
 8000918:	e02e      	b.n	8000978 <display7SEG1.5432+0x394>
 800091a:	bf00      	nop
 800091c:	40010c00 	.word	0x40010c00
	  else if (num == 9){
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2b09      	cmp	r3, #9
 8000924:	d128      	bne.n	8000978 <display7SEG1.5432+0x394>
		  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	2180      	movs	r1, #128	; 0x80
 800092a:	4815      	ldr	r0, [pc, #84]	; (8000980 <display7SEG1.5432+0x39c>)
 800092c:	f000 fc2a 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000936:	4812      	ldr	r0, [pc, #72]	; (8000980 <display7SEG1.5432+0x39c>)
 8000938:	f000 fc24 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, RESET);
 800093c:	2200      	movs	r2, #0
 800093e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000942:	480f      	ldr	r0, [pc, #60]	; (8000980 <display7SEG1.5432+0x39c>)
 8000944:	f000 fc1e 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, RESET);
 8000948:	2200      	movs	r2, #0
 800094a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800094e:	480c      	ldr	r0, [pc, #48]	; (8000980 <display7SEG1.5432+0x39c>)
 8000950:	f000 fc18 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, SET);
 8000954:	2201      	movs	r2, #1
 8000956:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800095a:	4809      	ldr	r0, [pc, #36]	; (8000980 <display7SEG1.5432+0x39c>)
 800095c:	f000 fc12 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000966:	4806      	ldr	r0, [pc, #24]	; (8000980 <display7SEG1.5432+0x39c>)
 8000968:	f000 fc0c 	bl	8001184 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000972:	4803      	ldr	r0, [pc, #12]	; (8000980 <display7SEG1.5432+0x39c>)
 8000974:	f000 fc06 	bl	8001184 <HAL_GPIO_WritePin>
  }
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40010c00 	.word	0x40010c00

08000984 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b090      	sub	sp, #64	; 0x40
 8000988:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800098a:	f107 0318 	add.w	r3, r7, #24
 800098e:	2228      	movs	r2, #40	; 0x28
 8000990:	2100      	movs	r1, #0
 8000992:	4618      	mov	r0, r3
 8000994:	f001 f80e 	bl	80019b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009a6:	2302      	movs	r3, #2
 80009a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009aa:	2301      	movs	r3, #1
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ae:	2310      	movs	r3, #16
 80009b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009b2:	2300      	movs	r3, #0
 80009b4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b6:	f107 0318 	add.w	r3, r7, #24
 80009ba:	4618      	mov	r0, r3
 80009bc:	f000 fbfa 	bl	80011b4 <HAL_RCC_OscConfig>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <SystemClock_Config+0x46>
  {
    Error_Handler();
 80009c6:	f000 f86d 	bl	8000aa4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ca:	230f      	movs	r3, #15
 80009cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009ce:	2300      	movs	r3, #0
 80009d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009d6:	2300      	movs	r3, #0
 80009d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009da:	2300      	movs	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 fe66 	bl	80016b4 <HAL_RCC_ClockConfig>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80009ee:	f000 f859 	bl	8000aa4 <Error_Handler>
  }
}
 80009f2:	bf00      	nop
 80009f4:	3740      	adds	r7, #64	; 0x40
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
	...

080009fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a02:	f107 0308 	add.w	r3, r7, #8
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a10:	4b21      	ldr	r3, [pc, #132]	; (8000a98 <MX_GPIO_Init+0x9c>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	4a20      	ldr	r2, [pc, #128]	; (8000a98 <MX_GPIO_Init+0x9c>)
 8000a16:	f043 0304 	orr.w	r3, r3, #4
 8000a1a:	6193      	str	r3, [r2, #24]
 8000a1c:	4b1e      	ldr	r3, [pc, #120]	; (8000a98 <MX_GPIO_Init+0x9c>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	f003 0304 	and.w	r3, r3, #4
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a28:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <MX_GPIO_Init+0x9c>)
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	4a1a      	ldr	r2, [pc, #104]	; (8000a98 <MX_GPIO_Init+0x9c>)
 8000a2e:	f043 0308 	orr.w	r3, r3, #8
 8000a32:	6193      	str	r3, [r2, #24]
 8000a34:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <MX_GPIO_Init+0x9c>)
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	f003 0308 	and.w	r3, r3, #8
 8000a3c:	603b      	str	r3, [r7, #0]
 8000a3e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Red1_Pin|Yellow1_Pin|Green1_Pin|Red2_Pin
 8000a40:	2200      	movs	r2, #0
 8000a42:	217e      	movs	r1, #126	; 0x7e
 8000a44:	4815      	ldr	r0, [pc, #84]	; (8000a9c <MX_GPIO_Init+0xa0>)
 8000a46:	f000 fb9d 	bl	8001184 <HAL_GPIO_WritePin>
                          |Yellow2_Pin|Green2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|c_Pin|d1_Pin
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8000a50:	4813      	ldr	r0, [pc, #76]	; (8000aa0 <MX_GPIO_Init+0xa4>)
 8000a52:	f000 fb97 	bl	8001184 <HAL_GPIO_WritePin>
                          |e_Pin|f_Pin|g_Pin|a1_Pin
                          |b1_Pin|c1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Red1_Pin Yellow1_Pin Green1_Pin Red2_Pin
                           Yellow2_Pin Green2_Pin */
  GPIO_InitStruct.Pin = Red1_Pin|Yellow1_Pin|Green1_Pin|Red2_Pin
 8000a56:	237e      	movs	r3, #126	; 0x7e
 8000a58:	60bb      	str	r3, [r7, #8]
                          |Yellow2_Pin|Green2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	2302      	movs	r3, #2
 8000a64:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a66:	f107 0308 	add.w	r3, r7, #8
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	480b      	ldr	r0, [pc, #44]	; (8000a9c <MX_GPIO_Init+0xa0>)
 8000a6e:	f000 fa0f 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : a_Pin b_Pin c_Pin d1_Pin
                           e1_Pin f1_Pin g1_Pin d_Pin
                           e_Pin f_Pin g_Pin a1_Pin
                           b1_Pin c1_Pin */
  GPIO_InitStruct.Pin = a_Pin|b_Pin|c_Pin|d1_Pin
 8000a72:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000a76:	60bb      	str	r3, [r7, #8]
                          |e1_Pin|f1_Pin|g1_Pin|d_Pin
                          |e_Pin|f_Pin|g_Pin|a1_Pin
                          |b1_Pin|c1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2302      	movs	r3, #2
 8000a82:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a84:	f107 0308 	add.w	r3, r7, #8
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <MX_GPIO_Init+0xa4>)
 8000a8c:	f000 fa00 	bl	8000e90 <HAL_GPIO_Init>

}
 8000a90:	bf00      	nop
 8000a92:	3718      	adds	r7, #24
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	40010800 	.word	0x40010800
 8000aa0:	40010c00 	.word	0x40010c00

08000aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa8:	b672      	cpsid	i
}
 8000aaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aac:	e7fe      	b.n	8000aac <Error_Handler+0x8>
	...

08000ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ab6:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <HAL_MspInit+0x5c>)
 8000ab8:	699b      	ldr	r3, [r3, #24]
 8000aba:	4a14      	ldr	r2, [pc, #80]	; (8000b0c <HAL_MspInit+0x5c>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6193      	str	r3, [r2, #24]
 8000ac2:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <HAL_MspInit+0x5c>)
 8000ac4:	699b      	ldr	r3, [r3, #24]
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <HAL_MspInit+0x5c>)
 8000ad0:	69db      	ldr	r3, [r3, #28]
 8000ad2:	4a0e      	ldr	r2, [pc, #56]	; (8000b0c <HAL_MspInit+0x5c>)
 8000ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad8:	61d3      	str	r3, [r2, #28]
 8000ada:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <HAL_MspInit+0x5c>)
 8000adc:	69db      	ldr	r3, [r3, #28]
 8000ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000ae6:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <HAL_MspInit+0x60>)
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	4a04      	ldr	r2, [pc, #16]	; (8000b10 <HAL_MspInit+0x60>)
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b02:	bf00      	nop
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	40010000 	.word	0x40010000

08000b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <NMI_Handler+0x4>

08000b1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <HardFault_Handler+0x4>

08000b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <MemManage_Handler+0x4>

08000b26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <BusFault_Handler+0x4>

08000b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <UsageFault_Handler+0x4>

08000b32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bc80      	pop	{r7}
 8000b3c:	4770      	bx	lr

08000b3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bc80      	pop	{r7}
 8000b48:	4770      	bx	lr

08000b4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr

08000b56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b5a:	f000 f875 	bl	8000c48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bc80      	pop	{r7}
 8000b6c:	4770      	bx	lr
	...

08000b70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b70:	f7ff fff7 	bl	8000b62 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b74:	480b      	ldr	r0, [pc, #44]	; (8000ba4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b76:	490c      	ldr	r1, [pc, #48]	; (8000ba8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b78:	4a0c      	ldr	r2, [pc, #48]	; (8000bac <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b7c:	e002      	b.n	8000b84 <LoopCopyDataInit>

08000b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b82:	3304      	adds	r3, #4

08000b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b88:	d3f9      	bcc.n	8000b7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b8a:	4a09      	ldr	r2, [pc, #36]	; (8000bb0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b8c:	4c09      	ldr	r4, [pc, #36]	; (8000bb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b90:	e001      	b.n	8000b96 <LoopFillZerobss>

08000b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b94:	3204      	adds	r2, #4

08000b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b98:	d3fb      	bcc.n	8000b92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b9a:	f000 fee7 	bl	800196c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b9e:	f7ff fc67 	bl	8000470 <main>
  bx lr
 8000ba2:	4770      	bx	lr
  ldr r0, =_sdata
 8000ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bac:	08001a08 	.word	0x08001a08
  ldr r2, =_sbss
 8000bb0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bb4:	2000002c 	.word	0x2000002c

08000bb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bb8:	e7fe      	b.n	8000bb8 <ADC1_2_IRQHandler>
	...

08000bbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <HAL_Init+0x28>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a07      	ldr	r2, [pc, #28]	; (8000be4 <HAL_Init+0x28>)
 8000bc6:	f043 0310 	orr.w	r3, r3, #16
 8000bca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bcc:	2003      	movs	r0, #3
 8000bce:	f000 f92b 	bl	8000e28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd2:	200f      	movs	r0, #15
 8000bd4:	f000 f808 	bl	8000be8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd8:	f7ff ff6a 	bl	8000ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40022000 	.word	0x40022000

08000be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <HAL_InitTick+0x54>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <HAL_InitTick+0x58>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c06:	4618      	mov	r0, r3
 8000c08:	f000 f935 	bl	8000e76 <HAL_SYSTICK_Config>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e00e      	b.n	8000c34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b0f      	cmp	r3, #15
 8000c1a:	d80a      	bhi.n	8000c32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	6879      	ldr	r1, [r7, #4]
 8000c20:	f04f 30ff 	mov.w	r0, #4294967295
 8000c24:	f000 f90b 	bl	8000e3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c28:	4a06      	ldr	r2, [pc, #24]	; (8000c44 <HAL_InitTick+0x5c>)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e000      	b.n	8000c34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000000 	.word	0x20000000
 8000c40:	20000008 	.word	0x20000008
 8000c44:	20000004 	.word	0x20000004

08000c48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c4c:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <HAL_IncTick+0x1c>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	461a      	mov	r2, r3
 8000c52:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <HAL_IncTick+0x20>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4413      	add	r3, r2
 8000c58:	4a03      	ldr	r2, [pc, #12]	; (8000c68 <HAL_IncTick+0x20>)
 8000c5a:	6013      	str	r3, [r2, #0]
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr
 8000c64:	20000008 	.word	0x20000008
 8000c68:	20000028 	.word	0x20000028

08000c6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c70:	4b02      	ldr	r3, [pc, #8]	; (8000c7c <HAL_GetTick+0x10>)
 8000c72:	681b      	ldr	r3, [r3, #0]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc80      	pop	{r7}
 8000c7a:	4770      	bx	lr
 8000c7c:	20000028 	.word	0x20000028

08000c80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c88:	f7ff fff0 	bl	8000c6c <HAL_GetTick>
 8000c8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c98:	d005      	beq.n	8000ca6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c9a:	4b0a      	ldr	r3, [pc, #40]	; (8000cc4 <HAL_Delay+0x44>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ca6:	bf00      	nop
 8000ca8:	f7ff ffe0 	bl	8000c6c <HAL_GetTick>
 8000cac:	4602      	mov	r2, r0
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	68fa      	ldr	r2, [r7, #12]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d8f7      	bhi.n	8000ca8 <HAL_Delay+0x28>
  {
  }
}
 8000cb8:	bf00      	nop
 8000cba:	bf00      	nop
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000008 	.word	0x20000008

08000cc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <__NVIC_SetPriorityGrouping+0x44>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cde:	68ba      	ldr	r2, [r7, #8]
 8000ce0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cfa:	4a04      	ldr	r2, [pc, #16]	; (8000d0c <__NVIC_SetPriorityGrouping+0x44>)
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	60d3      	str	r3, [r2, #12]
}
 8000d00:	bf00      	nop
 8000d02:	3714      	adds	r7, #20
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc80      	pop	{r7}
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d14:	4b04      	ldr	r3, [pc, #16]	; (8000d28 <__NVIC_GetPriorityGrouping+0x18>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	0a1b      	lsrs	r3, r3, #8
 8000d1a:	f003 0307 	and.w	r3, r3, #7
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	6039      	str	r1, [r7, #0]
 8000d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	db0a      	blt.n	8000d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	490c      	ldr	r1, [pc, #48]	; (8000d78 <__NVIC_SetPriority+0x4c>)
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	0112      	lsls	r2, r2, #4
 8000d4c:	b2d2      	uxtb	r2, r2
 8000d4e:	440b      	add	r3, r1
 8000d50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d54:	e00a      	b.n	8000d6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	4908      	ldr	r1, [pc, #32]	; (8000d7c <__NVIC_SetPriority+0x50>)
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	f003 030f 	and.w	r3, r3, #15
 8000d62:	3b04      	subs	r3, #4
 8000d64:	0112      	lsls	r2, r2, #4
 8000d66:	b2d2      	uxtb	r2, r2
 8000d68:	440b      	add	r3, r1
 8000d6a:	761a      	strb	r2, [r3, #24]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000e100 	.word	0xe000e100
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b089      	sub	sp, #36	; 0x24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	f1c3 0307 	rsb	r3, r3, #7
 8000d9a:	2b04      	cmp	r3, #4
 8000d9c:	bf28      	it	cs
 8000d9e:	2304      	movcs	r3, #4
 8000da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3304      	adds	r3, #4
 8000da6:	2b06      	cmp	r3, #6
 8000da8:	d902      	bls.n	8000db0 <NVIC_EncodePriority+0x30>
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3b03      	subs	r3, #3
 8000dae:	e000      	b.n	8000db2 <NVIC_EncodePriority+0x32>
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db4:	f04f 32ff 	mov.w	r2, #4294967295
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	43da      	mvns	r2, r3
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	401a      	ands	r2, r3
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd2:	43d9      	mvns	r1, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd8:	4313      	orrs	r3, r2
         );
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3724      	adds	r7, #36	; 0x24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr

08000de4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000df4:	d301      	bcc.n	8000dfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000df6:	2301      	movs	r3, #1
 8000df8:	e00f      	b.n	8000e1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dfa:	4a0a      	ldr	r2, [pc, #40]	; (8000e24 <SysTick_Config+0x40>)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e02:	210f      	movs	r1, #15
 8000e04:	f04f 30ff 	mov.w	r0, #4294967295
 8000e08:	f7ff ff90 	bl	8000d2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e0c:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <SysTick_Config+0x40>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e12:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <SysTick_Config+0x40>)
 8000e14:	2207      	movs	r2, #7
 8000e16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	e000e010 	.word	0xe000e010

08000e28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f7ff ff49 	bl	8000cc8 <__NVIC_SetPriorityGrouping>
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b086      	sub	sp, #24
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	4603      	mov	r3, r0
 8000e46:	60b9      	str	r1, [r7, #8]
 8000e48:	607a      	str	r2, [r7, #4]
 8000e4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e50:	f7ff ff5e 	bl	8000d10 <__NVIC_GetPriorityGrouping>
 8000e54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	68b9      	ldr	r1, [r7, #8]
 8000e5a:	6978      	ldr	r0, [r7, #20]
 8000e5c:	f7ff ff90 	bl	8000d80 <NVIC_EncodePriority>
 8000e60:	4602      	mov	r2, r0
 8000e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e66:	4611      	mov	r1, r2
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff5f 	bl	8000d2c <__NVIC_SetPriority>
}
 8000e6e:	bf00      	nop
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff ffb0 	bl	8000de4 <SysTick_Config>
 8000e84:	4603      	mov	r3, r0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b08b      	sub	sp, #44	; 0x2c
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ea2:	e148      	b.n	8001136 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	69fa      	ldr	r2, [r7, #28]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	f040 8137 	bne.w	8001130 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	4aa3      	ldr	r2, [pc, #652]	; (8001154 <HAL_GPIO_Init+0x2c4>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d05e      	beq.n	8000f8a <HAL_GPIO_Init+0xfa>
 8000ecc:	4aa1      	ldr	r2, [pc, #644]	; (8001154 <HAL_GPIO_Init+0x2c4>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d875      	bhi.n	8000fbe <HAL_GPIO_Init+0x12e>
 8000ed2:	4aa1      	ldr	r2, [pc, #644]	; (8001158 <HAL_GPIO_Init+0x2c8>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d058      	beq.n	8000f8a <HAL_GPIO_Init+0xfa>
 8000ed8:	4a9f      	ldr	r2, [pc, #636]	; (8001158 <HAL_GPIO_Init+0x2c8>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d86f      	bhi.n	8000fbe <HAL_GPIO_Init+0x12e>
 8000ede:	4a9f      	ldr	r2, [pc, #636]	; (800115c <HAL_GPIO_Init+0x2cc>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d052      	beq.n	8000f8a <HAL_GPIO_Init+0xfa>
 8000ee4:	4a9d      	ldr	r2, [pc, #628]	; (800115c <HAL_GPIO_Init+0x2cc>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d869      	bhi.n	8000fbe <HAL_GPIO_Init+0x12e>
 8000eea:	4a9d      	ldr	r2, [pc, #628]	; (8001160 <HAL_GPIO_Init+0x2d0>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d04c      	beq.n	8000f8a <HAL_GPIO_Init+0xfa>
 8000ef0:	4a9b      	ldr	r2, [pc, #620]	; (8001160 <HAL_GPIO_Init+0x2d0>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d863      	bhi.n	8000fbe <HAL_GPIO_Init+0x12e>
 8000ef6:	4a9b      	ldr	r2, [pc, #620]	; (8001164 <HAL_GPIO_Init+0x2d4>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d046      	beq.n	8000f8a <HAL_GPIO_Init+0xfa>
 8000efc:	4a99      	ldr	r2, [pc, #612]	; (8001164 <HAL_GPIO_Init+0x2d4>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d85d      	bhi.n	8000fbe <HAL_GPIO_Init+0x12e>
 8000f02:	2b12      	cmp	r3, #18
 8000f04:	d82a      	bhi.n	8000f5c <HAL_GPIO_Init+0xcc>
 8000f06:	2b12      	cmp	r3, #18
 8000f08:	d859      	bhi.n	8000fbe <HAL_GPIO_Init+0x12e>
 8000f0a:	a201      	add	r2, pc, #4	; (adr r2, 8000f10 <HAL_GPIO_Init+0x80>)
 8000f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f10:	08000f8b 	.word	0x08000f8b
 8000f14:	08000f65 	.word	0x08000f65
 8000f18:	08000f77 	.word	0x08000f77
 8000f1c:	08000fb9 	.word	0x08000fb9
 8000f20:	08000fbf 	.word	0x08000fbf
 8000f24:	08000fbf 	.word	0x08000fbf
 8000f28:	08000fbf 	.word	0x08000fbf
 8000f2c:	08000fbf 	.word	0x08000fbf
 8000f30:	08000fbf 	.word	0x08000fbf
 8000f34:	08000fbf 	.word	0x08000fbf
 8000f38:	08000fbf 	.word	0x08000fbf
 8000f3c:	08000fbf 	.word	0x08000fbf
 8000f40:	08000fbf 	.word	0x08000fbf
 8000f44:	08000fbf 	.word	0x08000fbf
 8000f48:	08000fbf 	.word	0x08000fbf
 8000f4c:	08000fbf 	.word	0x08000fbf
 8000f50:	08000fbf 	.word	0x08000fbf
 8000f54:	08000f6d 	.word	0x08000f6d
 8000f58:	08000f81 	.word	0x08000f81
 8000f5c:	4a82      	ldr	r2, [pc, #520]	; (8001168 <HAL_GPIO_Init+0x2d8>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d013      	beq.n	8000f8a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f62:	e02c      	b.n	8000fbe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	623b      	str	r3, [r7, #32]
          break;
 8000f6a:	e029      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	3304      	adds	r3, #4
 8000f72:	623b      	str	r3, [r7, #32]
          break;
 8000f74:	e024      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	3308      	adds	r3, #8
 8000f7c:	623b      	str	r3, [r7, #32]
          break;
 8000f7e:	e01f      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	330c      	adds	r3, #12
 8000f86:	623b      	str	r3, [r7, #32]
          break;
 8000f88:	e01a      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d102      	bne.n	8000f98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f92:	2304      	movs	r3, #4
 8000f94:	623b      	str	r3, [r7, #32]
          break;
 8000f96:	e013      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d105      	bne.n	8000fac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fa0:	2308      	movs	r3, #8
 8000fa2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	69fa      	ldr	r2, [r7, #28]
 8000fa8:	611a      	str	r2, [r3, #16]
          break;
 8000faa:	e009      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fac:	2308      	movs	r3, #8
 8000fae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	69fa      	ldr	r2, [r7, #28]
 8000fb4:	615a      	str	r2, [r3, #20]
          break;
 8000fb6:	e003      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	623b      	str	r3, [r7, #32]
          break;
 8000fbc:	e000      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
          break;
 8000fbe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	2bff      	cmp	r3, #255	; 0xff
 8000fc4:	d801      	bhi.n	8000fca <HAL_GPIO_Init+0x13a>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	e001      	b.n	8000fce <HAL_GPIO_Init+0x13e>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	2bff      	cmp	r3, #255	; 0xff
 8000fd4:	d802      	bhi.n	8000fdc <HAL_GPIO_Init+0x14c>
 8000fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	e002      	b.n	8000fe2 <HAL_GPIO_Init+0x152>
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fde:	3b08      	subs	r3, #8
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	210f      	movs	r1, #15
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	6a39      	ldr	r1, [r7, #32]
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffc:	431a      	orrs	r2, r3
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100a:	2b00      	cmp	r3, #0
 800100c:	f000 8090 	beq.w	8001130 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001010:	4b56      	ldr	r3, [pc, #344]	; (800116c <HAL_GPIO_Init+0x2dc>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	4a55      	ldr	r2, [pc, #340]	; (800116c <HAL_GPIO_Init+0x2dc>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	6193      	str	r3, [r2, #24]
 800101c:	4b53      	ldr	r3, [pc, #332]	; (800116c <HAL_GPIO_Init+0x2dc>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001028:	4a51      	ldr	r2, [pc, #324]	; (8001170 <HAL_GPIO_Init+0x2e0>)
 800102a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102c:	089b      	lsrs	r3, r3, #2
 800102e:	3302      	adds	r3, #2
 8001030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001034:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001038:	f003 0303 	and.w	r3, r3, #3
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	220f      	movs	r2, #15
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	4013      	ands	r3, r2
 800104a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a49      	ldr	r2, [pc, #292]	; (8001174 <HAL_GPIO_Init+0x2e4>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d00d      	beq.n	8001070 <HAL_GPIO_Init+0x1e0>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a48      	ldr	r2, [pc, #288]	; (8001178 <HAL_GPIO_Init+0x2e8>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d007      	beq.n	800106c <HAL_GPIO_Init+0x1dc>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a47      	ldr	r2, [pc, #284]	; (800117c <HAL_GPIO_Init+0x2ec>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d101      	bne.n	8001068 <HAL_GPIO_Init+0x1d8>
 8001064:	2302      	movs	r3, #2
 8001066:	e004      	b.n	8001072 <HAL_GPIO_Init+0x1e2>
 8001068:	2303      	movs	r3, #3
 800106a:	e002      	b.n	8001072 <HAL_GPIO_Init+0x1e2>
 800106c:	2301      	movs	r3, #1
 800106e:	e000      	b.n	8001072 <HAL_GPIO_Init+0x1e2>
 8001070:	2300      	movs	r3, #0
 8001072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001074:	f002 0203 	and.w	r2, r2, #3
 8001078:	0092      	lsls	r2, r2, #2
 800107a:	4093      	lsls	r3, r2
 800107c:	68fa      	ldr	r2, [r7, #12]
 800107e:	4313      	orrs	r3, r2
 8001080:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001082:	493b      	ldr	r1, [pc, #236]	; (8001170 <HAL_GPIO_Init+0x2e0>)
 8001084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001086:	089b      	lsrs	r3, r3, #2
 8001088:	3302      	adds	r3, #2
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d006      	beq.n	80010aa <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800109c:	4b38      	ldr	r3, [pc, #224]	; (8001180 <HAL_GPIO_Init+0x2f0>)
 800109e:	689a      	ldr	r2, [r3, #8]
 80010a0:	4937      	ldr	r1, [pc, #220]	; (8001180 <HAL_GPIO_Init+0x2f0>)
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	608b      	str	r3, [r1, #8]
 80010a8:	e006      	b.n	80010b8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010aa:	4b35      	ldr	r3, [pc, #212]	; (8001180 <HAL_GPIO_Init+0x2f0>)
 80010ac:	689a      	ldr	r2, [r3, #8]
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	43db      	mvns	r3, r3
 80010b2:	4933      	ldr	r1, [pc, #204]	; (8001180 <HAL_GPIO_Init+0x2f0>)
 80010b4:	4013      	ands	r3, r2
 80010b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d006      	beq.n	80010d2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010c4:	4b2e      	ldr	r3, [pc, #184]	; (8001180 <HAL_GPIO_Init+0x2f0>)
 80010c6:	68da      	ldr	r2, [r3, #12]
 80010c8:	492d      	ldr	r1, [pc, #180]	; (8001180 <HAL_GPIO_Init+0x2f0>)
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	60cb      	str	r3, [r1, #12]
 80010d0:	e006      	b.n	80010e0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010d2:	4b2b      	ldr	r3, [pc, #172]	; (8001180 <HAL_GPIO_Init+0x2f0>)
 80010d4:	68da      	ldr	r2, [r3, #12]
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	43db      	mvns	r3, r3
 80010da:	4929      	ldr	r1, [pc, #164]	; (8001180 <HAL_GPIO_Init+0x2f0>)
 80010dc:	4013      	ands	r3, r2
 80010de:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d006      	beq.n	80010fa <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010ec:	4b24      	ldr	r3, [pc, #144]	; (8001180 <HAL_GPIO_Init+0x2f0>)
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	4923      	ldr	r1, [pc, #140]	; (8001180 <HAL_GPIO_Init+0x2f0>)
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	604b      	str	r3, [r1, #4]
 80010f8:	e006      	b.n	8001108 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010fa:	4b21      	ldr	r3, [pc, #132]	; (8001180 <HAL_GPIO_Init+0x2f0>)
 80010fc:	685a      	ldr	r2, [r3, #4]
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	43db      	mvns	r3, r3
 8001102:	491f      	ldr	r1, [pc, #124]	; (8001180 <HAL_GPIO_Init+0x2f0>)
 8001104:	4013      	ands	r3, r2
 8001106:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d006      	beq.n	8001122 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001114:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <HAL_GPIO_Init+0x2f0>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4919      	ldr	r1, [pc, #100]	; (8001180 <HAL_GPIO_Init+0x2f0>)
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	4313      	orrs	r3, r2
 800111e:	600b      	str	r3, [r1, #0]
 8001120:	e006      	b.n	8001130 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001122:	4b17      	ldr	r3, [pc, #92]	; (8001180 <HAL_GPIO_Init+0x2f0>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	43db      	mvns	r3, r3
 800112a:	4915      	ldr	r1, [pc, #84]	; (8001180 <HAL_GPIO_Init+0x2f0>)
 800112c:	4013      	ands	r3, r2
 800112e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001132:	3301      	adds	r3, #1
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113c:	fa22 f303 	lsr.w	r3, r2, r3
 8001140:	2b00      	cmp	r3, #0
 8001142:	f47f aeaf 	bne.w	8000ea4 <HAL_GPIO_Init+0x14>
  }
}
 8001146:	bf00      	nop
 8001148:	bf00      	nop
 800114a:	372c      	adds	r7, #44	; 0x2c
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	10320000 	.word	0x10320000
 8001158:	10310000 	.word	0x10310000
 800115c:	10220000 	.word	0x10220000
 8001160:	10210000 	.word	0x10210000
 8001164:	10120000 	.word	0x10120000
 8001168:	10110000 	.word	0x10110000
 800116c:	40021000 	.word	0x40021000
 8001170:	40010000 	.word	0x40010000
 8001174:	40010800 	.word	0x40010800
 8001178:	40010c00 	.word	0x40010c00
 800117c:	40011000 	.word	0x40011000
 8001180:	40010400 	.word	0x40010400

08001184 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	460b      	mov	r3, r1
 800118e:	807b      	strh	r3, [r7, #2]
 8001190:	4613      	mov	r3, r2
 8001192:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001194:	787b      	ldrb	r3, [r7, #1]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800119a:	887a      	ldrh	r2, [r7, #2]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011a0:	e003      	b.n	80011aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011a2:	887b      	ldrh	r3, [r7, #2]
 80011a4:	041a      	lsls	r2, r3, #16
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	611a      	str	r2, [r3, #16]
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr

080011b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d101      	bne.n	80011c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e26c      	b.n	80016a0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f000 8087 	beq.w	80012e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011d4:	4b92      	ldr	r3, [pc, #584]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f003 030c 	and.w	r3, r3, #12
 80011dc:	2b04      	cmp	r3, #4
 80011de:	d00c      	beq.n	80011fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011e0:	4b8f      	ldr	r3, [pc, #572]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 030c 	and.w	r3, r3, #12
 80011e8:	2b08      	cmp	r3, #8
 80011ea:	d112      	bne.n	8001212 <HAL_RCC_OscConfig+0x5e>
 80011ec:	4b8c      	ldr	r3, [pc, #560]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011f8:	d10b      	bne.n	8001212 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011fa:	4b89      	ldr	r3, [pc, #548]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d06c      	beq.n	80012e0 <HAL_RCC_OscConfig+0x12c>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d168      	bne.n	80012e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e246      	b.n	80016a0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800121a:	d106      	bne.n	800122a <HAL_RCC_OscConfig+0x76>
 800121c:	4b80      	ldr	r3, [pc, #512]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a7f      	ldr	r2, [pc, #508]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 8001222:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001226:	6013      	str	r3, [r2, #0]
 8001228:	e02e      	b.n	8001288 <HAL_RCC_OscConfig+0xd4>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d10c      	bne.n	800124c <HAL_RCC_OscConfig+0x98>
 8001232:	4b7b      	ldr	r3, [pc, #492]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a7a      	ldr	r2, [pc, #488]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 8001238:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800123c:	6013      	str	r3, [r2, #0]
 800123e:	4b78      	ldr	r3, [pc, #480]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a77      	ldr	r2, [pc, #476]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 8001244:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001248:	6013      	str	r3, [r2, #0]
 800124a:	e01d      	b.n	8001288 <HAL_RCC_OscConfig+0xd4>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001254:	d10c      	bne.n	8001270 <HAL_RCC_OscConfig+0xbc>
 8001256:	4b72      	ldr	r3, [pc, #456]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a71      	ldr	r2, [pc, #452]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 800125c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	4b6f      	ldr	r3, [pc, #444]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a6e      	ldr	r2, [pc, #440]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 8001268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	e00b      	b.n	8001288 <HAL_RCC_OscConfig+0xd4>
 8001270:	4b6b      	ldr	r3, [pc, #428]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a6a      	ldr	r2, [pc, #424]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 8001276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	4b68      	ldr	r3, [pc, #416]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a67      	ldr	r2, [pc, #412]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 8001282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001286:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d013      	beq.n	80012b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001290:	f7ff fcec 	bl	8000c6c <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001298:	f7ff fce8 	bl	8000c6c <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b64      	cmp	r3, #100	; 0x64
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e1fa      	b.n	80016a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012aa:	4b5d      	ldr	r3, [pc, #372]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0f0      	beq.n	8001298 <HAL_RCC_OscConfig+0xe4>
 80012b6:	e014      	b.n	80012e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b8:	f7ff fcd8 	bl	8000c6c <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012c0:	f7ff fcd4 	bl	8000c6c <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b64      	cmp	r3, #100	; 0x64
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e1e6      	b.n	80016a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012d2:	4b53      	ldr	r3, [pc, #332]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d1f0      	bne.n	80012c0 <HAL_RCC_OscConfig+0x10c>
 80012de:	e000      	b.n	80012e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d063      	beq.n	80013b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012ee:	4b4c      	ldr	r3, [pc, #304]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f003 030c 	and.w	r3, r3, #12
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d00b      	beq.n	8001312 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012fa:	4b49      	ldr	r3, [pc, #292]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f003 030c 	and.w	r3, r3, #12
 8001302:	2b08      	cmp	r3, #8
 8001304:	d11c      	bne.n	8001340 <HAL_RCC_OscConfig+0x18c>
 8001306:	4b46      	ldr	r3, [pc, #280]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d116      	bne.n	8001340 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001312:	4b43      	ldr	r3, [pc, #268]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d005      	beq.n	800132a <HAL_RCC_OscConfig+0x176>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	691b      	ldr	r3, [r3, #16]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d001      	beq.n	800132a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e1ba      	b.n	80016a0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132a:	4b3d      	ldr	r3, [pc, #244]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	695b      	ldr	r3, [r3, #20]
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	4939      	ldr	r1, [pc, #228]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 800133a:	4313      	orrs	r3, r2
 800133c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800133e:	e03a      	b.n	80013b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	691b      	ldr	r3, [r3, #16]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d020      	beq.n	800138a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001348:	4b36      	ldr	r3, [pc, #216]	; (8001424 <HAL_RCC_OscConfig+0x270>)
 800134a:	2201      	movs	r2, #1
 800134c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134e:	f7ff fc8d 	bl	8000c6c <HAL_GetTick>
 8001352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001354:	e008      	b.n	8001368 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001356:	f7ff fc89 	bl	8000c6c <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e19b      	b.n	80016a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001368:	4b2d      	ldr	r3, [pc, #180]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	2b00      	cmp	r3, #0
 8001372:	d0f0      	beq.n	8001356 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001374:	4b2a      	ldr	r3, [pc, #168]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	695b      	ldr	r3, [r3, #20]
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	4927      	ldr	r1, [pc, #156]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 8001384:	4313      	orrs	r3, r2
 8001386:	600b      	str	r3, [r1, #0]
 8001388:	e015      	b.n	80013b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800138a:	4b26      	ldr	r3, [pc, #152]	; (8001424 <HAL_RCC_OscConfig+0x270>)
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001390:	f7ff fc6c 	bl	8000c6c <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001398:	f7ff fc68 	bl	8000c6c <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e17a      	b.n	80016a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013aa:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f0      	bne.n	8001398 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0308 	and.w	r3, r3, #8
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d03a      	beq.n	8001438 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d019      	beq.n	80013fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ca:	4b17      	ldr	r3, [pc, #92]	; (8001428 <HAL_RCC_OscConfig+0x274>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d0:	f7ff fc4c 	bl	8000c6c <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013d8:	f7ff fc48 	bl	8000c6c <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e15a      	b.n	80016a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ea:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 80013ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0f0      	beq.n	80013d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013f6:	2001      	movs	r0, #1
 80013f8:	f000 fa9a 	bl	8001930 <RCC_Delay>
 80013fc:	e01c      	b.n	8001438 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013fe:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <HAL_RCC_OscConfig+0x274>)
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001404:	f7ff fc32 	bl	8000c6c <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800140a:	e00f      	b.n	800142c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800140c:	f7ff fc2e 	bl	8000c6c <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d908      	bls.n	800142c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e140      	b.n	80016a0 <HAL_RCC_OscConfig+0x4ec>
 800141e:	bf00      	nop
 8001420:	40021000 	.word	0x40021000
 8001424:	42420000 	.word	0x42420000
 8001428:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800142c:	4b9e      	ldr	r3, [pc, #632]	; (80016a8 <HAL_RCC_OscConfig+0x4f4>)
 800142e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001430:	f003 0302 	and.w	r3, r3, #2
 8001434:	2b00      	cmp	r3, #0
 8001436:	d1e9      	bne.n	800140c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0304 	and.w	r3, r3, #4
 8001440:	2b00      	cmp	r3, #0
 8001442:	f000 80a6 	beq.w	8001592 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001446:	2300      	movs	r3, #0
 8001448:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800144a:	4b97      	ldr	r3, [pc, #604]	; (80016a8 <HAL_RCC_OscConfig+0x4f4>)
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d10d      	bne.n	8001472 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001456:	4b94      	ldr	r3, [pc, #592]	; (80016a8 <HAL_RCC_OscConfig+0x4f4>)
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	4a93      	ldr	r2, [pc, #588]	; (80016a8 <HAL_RCC_OscConfig+0x4f4>)
 800145c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001460:	61d3      	str	r3, [r2, #28]
 8001462:	4b91      	ldr	r3, [pc, #580]	; (80016a8 <HAL_RCC_OscConfig+0x4f4>)
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800146e:	2301      	movs	r3, #1
 8001470:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001472:	4b8e      	ldr	r3, [pc, #568]	; (80016ac <HAL_RCC_OscConfig+0x4f8>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800147a:	2b00      	cmp	r3, #0
 800147c:	d118      	bne.n	80014b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800147e:	4b8b      	ldr	r3, [pc, #556]	; (80016ac <HAL_RCC_OscConfig+0x4f8>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a8a      	ldr	r2, [pc, #552]	; (80016ac <HAL_RCC_OscConfig+0x4f8>)
 8001484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001488:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800148a:	f7ff fbef 	bl	8000c6c <HAL_GetTick>
 800148e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001490:	e008      	b.n	80014a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001492:	f7ff fbeb 	bl	8000c6c <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b64      	cmp	r3, #100	; 0x64
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e0fd      	b.n	80016a0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a4:	4b81      	ldr	r3, [pc, #516]	; (80016ac <HAL_RCC_OscConfig+0x4f8>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d0f0      	beq.n	8001492 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d106      	bne.n	80014c6 <HAL_RCC_OscConfig+0x312>
 80014b8:	4b7b      	ldr	r3, [pc, #492]	; (80016a8 <HAL_RCC_OscConfig+0x4f4>)
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	4a7a      	ldr	r2, [pc, #488]	; (80016a8 <HAL_RCC_OscConfig+0x4f4>)
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	6213      	str	r3, [r2, #32]
 80014c4:	e02d      	b.n	8001522 <HAL_RCC_OscConfig+0x36e>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d10c      	bne.n	80014e8 <HAL_RCC_OscConfig+0x334>
 80014ce:	4b76      	ldr	r3, [pc, #472]	; (80016a8 <HAL_RCC_OscConfig+0x4f4>)
 80014d0:	6a1b      	ldr	r3, [r3, #32]
 80014d2:	4a75      	ldr	r2, [pc, #468]	; (80016a8 <HAL_RCC_OscConfig+0x4f4>)
 80014d4:	f023 0301 	bic.w	r3, r3, #1
 80014d8:	6213      	str	r3, [r2, #32]
 80014da:	4b73      	ldr	r3, [pc, #460]	; (80016a8 <HAL_RCC_OscConfig+0x4f4>)
 80014dc:	6a1b      	ldr	r3, [r3, #32]
 80014de:	4a72      	ldr	r2, [pc, #456]	; (80016a8 <HAL_RCC_OscConfig+0x4f4>)
 80014e0:	f023 0304 	bic.w	r3, r3, #4
 80014e4:	6213      	str	r3, [r2, #32]
 80014e6:	e01c      	b.n	8001522 <HAL_RCC_OscConfig+0x36e>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	2b05      	cmp	r3, #5
 80014ee:	d10c      	bne.n	800150a <HAL_RCC_OscConfig+0x356>
 80014f0:	4b6d      	ldr	r3, [pc, #436]	; (80016a8 <HAL_RCC_OscConfig+0x4f4>)
 80014f2:	6a1b      	ldr	r3, [r3, #32]
 80014f4:	4a6c      	ldr	r2, [pc, #432]	; (80016a8 <HAL_RCC_OscConfig+0x4f4>)
 80014f6:	f043 0304 	orr.w	r3, r3, #4
 80014fa:	6213      	str	r3, [r2, #32]
 80014fc:	4b6a      	ldr	r3, [pc, #424]	; (80016a8 <HAL_RCC_OscConfig+0x4f4>)
 80014fe:	6a1b      	ldr	r3, [r3, #32]
 8001500:	4a69      	ldr	r2, [pc, #420]	; (80016a8 <HAL_RCC_OscConfig+0x4f4>)
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	6213      	str	r3, [r2, #32]
 8001508:	e00b      	b.n	8001522 <HAL_RCC_OscConfig+0x36e>
 800150a:	4b67      	ldr	r3, [pc, #412]	; (80016a8 <HAL_RCC_OscConfig+0x4f4>)
 800150c:	6a1b      	ldr	r3, [r3, #32]
 800150e:	4a66      	ldr	r2, [pc, #408]	; (80016a8 <HAL_RCC_OscConfig+0x4f4>)
 8001510:	f023 0301 	bic.w	r3, r3, #1
 8001514:	6213      	str	r3, [r2, #32]
 8001516:	4b64      	ldr	r3, [pc, #400]	; (80016a8 <HAL_RCC_OscConfig+0x4f4>)
 8001518:	6a1b      	ldr	r3, [r3, #32]
 800151a:	4a63      	ldr	r2, [pc, #396]	; (80016a8 <HAL_RCC_OscConfig+0x4f4>)
 800151c:	f023 0304 	bic.w	r3, r3, #4
 8001520:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d015      	beq.n	8001556 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800152a:	f7ff fb9f 	bl	8000c6c <HAL_GetTick>
 800152e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001530:	e00a      	b.n	8001548 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001532:	f7ff fb9b 	bl	8000c6c <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001540:	4293      	cmp	r3, r2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e0ab      	b.n	80016a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001548:	4b57      	ldr	r3, [pc, #348]	; (80016a8 <HAL_RCC_OscConfig+0x4f4>)
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d0ee      	beq.n	8001532 <HAL_RCC_OscConfig+0x37e>
 8001554:	e014      	b.n	8001580 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001556:	f7ff fb89 	bl	8000c6c <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800155c:	e00a      	b.n	8001574 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800155e:	f7ff fb85 	bl	8000c6c <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	f241 3288 	movw	r2, #5000	; 0x1388
 800156c:	4293      	cmp	r3, r2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e095      	b.n	80016a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001574:	4b4c      	ldr	r3, [pc, #304]	; (80016a8 <HAL_RCC_OscConfig+0x4f4>)
 8001576:	6a1b      	ldr	r3, [r3, #32]
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1ee      	bne.n	800155e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001580:	7dfb      	ldrb	r3, [r7, #23]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d105      	bne.n	8001592 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001586:	4b48      	ldr	r3, [pc, #288]	; (80016a8 <HAL_RCC_OscConfig+0x4f4>)
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	4a47      	ldr	r2, [pc, #284]	; (80016a8 <HAL_RCC_OscConfig+0x4f4>)
 800158c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001590:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	2b00      	cmp	r3, #0
 8001598:	f000 8081 	beq.w	800169e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800159c:	4b42      	ldr	r3, [pc, #264]	; (80016a8 <HAL_RCC_OscConfig+0x4f4>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 030c 	and.w	r3, r3, #12
 80015a4:	2b08      	cmp	r3, #8
 80015a6:	d061      	beq.n	800166c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	69db      	ldr	r3, [r3, #28]
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d146      	bne.n	800163e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b0:	4b3f      	ldr	r3, [pc, #252]	; (80016b0 <HAL_RCC_OscConfig+0x4fc>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b6:	f7ff fb59 	bl	8000c6c <HAL_GetTick>
 80015ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015be:	f7ff fb55 	bl	8000c6c <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e067      	b.n	80016a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015d0:	4b35      	ldr	r3, [pc, #212]	; (80016a8 <HAL_RCC_OscConfig+0x4f4>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d1f0      	bne.n	80015be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e4:	d108      	bne.n	80015f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015e6:	4b30      	ldr	r3, [pc, #192]	; (80016a8 <HAL_RCC_OscConfig+0x4f4>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	492d      	ldr	r1, [pc, #180]	; (80016a8 <HAL_RCC_OscConfig+0x4f4>)
 80015f4:	4313      	orrs	r3, r2
 80015f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015f8:	4b2b      	ldr	r3, [pc, #172]	; (80016a8 <HAL_RCC_OscConfig+0x4f4>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a19      	ldr	r1, [r3, #32]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001608:	430b      	orrs	r3, r1
 800160a:	4927      	ldr	r1, [pc, #156]	; (80016a8 <HAL_RCC_OscConfig+0x4f4>)
 800160c:	4313      	orrs	r3, r2
 800160e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001610:	4b27      	ldr	r3, [pc, #156]	; (80016b0 <HAL_RCC_OscConfig+0x4fc>)
 8001612:	2201      	movs	r2, #1
 8001614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001616:	f7ff fb29 	bl	8000c6c <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800161e:	f7ff fb25 	bl	8000c6c <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e037      	b.n	80016a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001630:	4b1d      	ldr	r3, [pc, #116]	; (80016a8 <HAL_RCC_OscConfig+0x4f4>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0f0      	beq.n	800161e <HAL_RCC_OscConfig+0x46a>
 800163c:	e02f      	b.n	800169e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800163e:	4b1c      	ldr	r3, [pc, #112]	; (80016b0 <HAL_RCC_OscConfig+0x4fc>)
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001644:	f7ff fb12 	bl	8000c6c <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800164c:	f7ff fb0e 	bl	8000c6c <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e020      	b.n	80016a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800165e:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <HAL_RCC_OscConfig+0x4f4>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f0      	bne.n	800164c <HAL_RCC_OscConfig+0x498>
 800166a:	e018      	b.n	800169e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	69db      	ldr	r3, [r3, #28]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d101      	bne.n	8001678 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e013      	b.n	80016a0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001678:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <HAL_RCC_OscConfig+0x4f4>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a1b      	ldr	r3, [r3, #32]
 8001688:	429a      	cmp	r2, r3
 800168a:	d106      	bne.n	800169a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001696:	429a      	cmp	r2, r3
 8001698:	d001      	beq.n	800169e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e000      	b.n	80016a0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40021000 	.word	0x40021000
 80016ac:	40007000 	.word	0x40007000
 80016b0:	42420060 	.word	0x42420060

080016b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d101      	bne.n	80016c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e0d0      	b.n	800186a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016c8:	4b6a      	ldr	r3, [pc, #424]	; (8001874 <HAL_RCC_ClockConfig+0x1c0>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0307 	and.w	r3, r3, #7
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d910      	bls.n	80016f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016d6:	4b67      	ldr	r3, [pc, #412]	; (8001874 <HAL_RCC_ClockConfig+0x1c0>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f023 0207 	bic.w	r2, r3, #7
 80016de:	4965      	ldr	r1, [pc, #404]	; (8001874 <HAL_RCC_ClockConfig+0x1c0>)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016e6:	4b63      	ldr	r3, [pc, #396]	; (8001874 <HAL_RCC_ClockConfig+0x1c0>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d001      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e0b8      	b.n	800186a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d020      	beq.n	8001746 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	2b00      	cmp	r3, #0
 800170e:	d005      	beq.n	800171c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001710:	4b59      	ldr	r3, [pc, #356]	; (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	4a58      	ldr	r2, [pc, #352]	; (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 8001716:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800171a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0308 	and.w	r3, r3, #8
 8001724:	2b00      	cmp	r3, #0
 8001726:	d005      	beq.n	8001734 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001728:	4b53      	ldr	r3, [pc, #332]	; (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	4a52      	ldr	r2, [pc, #328]	; (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 800172e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001732:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001734:	4b50      	ldr	r3, [pc, #320]	; (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	494d      	ldr	r1, [pc, #308]	; (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 8001742:	4313      	orrs	r3, r2
 8001744:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	d040      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d107      	bne.n	800176a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800175a:	4b47      	ldr	r3, [pc, #284]	; (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d115      	bne.n	8001792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e07f      	b.n	800186a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b02      	cmp	r3, #2
 8001770:	d107      	bne.n	8001782 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001772:	4b41      	ldr	r3, [pc, #260]	; (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d109      	bne.n	8001792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e073      	b.n	800186a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001782:	4b3d      	ldr	r3, [pc, #244]	; (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e06b      	b.n	800186a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001792:	4b39      	ldr	r3, [pc, #228]	; (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f023 0203 	bic.w	r2, r3, #3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	4936      	ldr	r1, [pc, #216]	; (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017a4:	f7ff fa62 	bl	8000c6c <HAL_GetTick>
 80017a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017aa:	e00a      	b.n	80017c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ac:	f7ff fa5e 	bl	8000c6c <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e053      	b.n	800186a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017c2:	4b2d      	ldr	r3, [pc, #180]	; (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f003 020c 	and.w	r2, r3, #12
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d1eb      	bne.n	80017ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017d4:	4b27      	ldr	r3, [pc, #156]	; (8001874 <HAL_RCC_ClockConfig+0x1c0>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0307 	and.w	r3, r3, #7
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d210      	bcs.n	8001804 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e2:	4b24      	ldr	r3, [pc, #144]	; (8001874 <HAL_RCC_ClockConfig+0x1c0>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f023 0207 	bic.w	r2, r3, #7
 80017ea:	4922      	ldr	r1, [pc, #136]	; (8001874 <HAL_RCC_ClockConfig+0x1c0>)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f2:	4b20      	ldr	r3, [pc, #128]	; (8001874 <HAL_RCC_ClockConfig+0x1c0>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d001      	beq.n	8001804 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e032      	b.n	800186a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	2b00      	cmp	r3, #0
 800180e:	d008      	beq.n	8001822 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001810:	4b19      	ldr	r3, [pc, #100]	; (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	4916      	ldr	r1, [pc, #88]	; (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 800181e:	4313      	orrs	r3, r2
 8001820:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0308 	and.w	r3, r3, #8
 800182a:	2b00      	cmp	r3, #0
 800182c:	d009      	beq.n	8001842 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800182e:	4b12      	ldr	r3, [pc, #72]	; (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	490e      	ldr	r1, [pc, #56]	; (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 800183e:	4313      	orrs	r3, r2
 8001840:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001842:	f000 f821 	bl	8001888 <HAL_RCC_GetSysClockFreq>
 8001846:	4602      	mov	r2, r0
 8001848:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	091b      	lsrs	r3, r3, #4
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	490a      	ldr	r1, [pc, #40]	; (800187c <HAL_RCC_ClockConfig+0x1c8>)
 8001854:	5ccb      	ldrb	r3, [r1, r3]
 8001856:	fa22 f303 	lsr.w	r3, r2, r3
 800185a:	4a09      	ldr	r2, [pc, #36]	; (8001880 <HAL_RCC_ClockConfig+0x1cc>)
 800185c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800185e:	4b09      	ldr	r3, [pc, #36]	; (8001884 <HAL_RCC_ClockConfig+0x1d0>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff f9c0 	bl	8000be8 <HAL_InitTick>

  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40022000 	.word	0x40022000
 8001878:	40021000 	.word	0x40021000
 800187c:	080019dc 	.word	0x080019dc
 8001880:	20000000 	.word	0x20000000
 8001884:	20000004 	.word	0x20000004

08001888 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001888:	b480      	push	{r7}
 800188a:	b087      	sub	sp, #28
 800188c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	2300      	movs	r3, #0
 8001894:	60bb      	str	r3, [r7, #8]
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
 800189a:	2300      	movs	r3, #0
 800189c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018a2:	4b1e      	ldr	r3, [pc, #120]	; (800191c <HAL_RCC_GetSysClockFreq+0x94>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f003 030c 	and.w	r3, r3, #12
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	d002      	beq.n	80018b8 <HAL_RCC_GetSysClockFreq+0x30>
 80018b2:	2b08      	cmp	r3, #8
 80018b4:	d003      	beq.n	80018be <HAL_RCC_GetSysClockFreq+0x36>
 80018b6:	e027      	b.n	8001908 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018b8:	4b19      	ldr	r3, [pc, #100]	; (8001920 <HAL_RCC_GetSysClockFreq+0x98>)
 80018ba:	613b      	str	r3, [r7, #16]
      break;
 80018bc:	e027      	b.n	800190e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	0c9b      	lsrs	r3, r3, #18
 80018c2:	f003 030f 	and.w	r3, r3, #15
 80018c6:	4a17      	ldr	r2, [pc, #92]	; (8001924 <HAL_RCC_GetSysClockFreq+0x9c>)
 80018c8:	5cd3      	ldrb	r3, [r2, r3]
 80018ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d010      	beq.n	80018f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018d6:	4b11      	ldr	r3, [pc, #68]	; (800191c <HAL_RCC_GetSysClockFreq+0x94>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	0c5b      	lsrs	r3, r3, #17
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	4a11      	ldr	r2, [pc, #68]	; (8001928 <HAL_RCC_GetSysClockFreq+0xa0>)
 80018e2:	5cd3      	ldrb	r3, [r2, r3]
 80018e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a0d      	ldr	r2, [pc, #52]	; (8001920 <HAL_RCC_GetSysClockFreq+0x98>)
 80018ea:	fb02 f203 	mul.w	r2, r2, r3
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	e004      	b.n	8001902 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4a0c      	ldr	r2, [pc, #48]	; (800192c <HAL_RCC_GetSysClockFreq+0xa4>)
 80018fc:	fb02 f303 	mul.w	r3, r2, r3
 8001900:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	613b      	str	r3, [r7, #16]
      break;
 8001906:	e002      	b.n	800190e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001908:	4b05      	ldr	r3, [pc, #20]	; (8001920 <HAL_RCC_GetSysClockFreq+0x98>)
 800190a:	613b      	str	r3, [r7, #16]
      break;
 800190c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800190e:	693b      	ldr	r3, [r7, #16]
}
 8001910:	4618      	mov	r0, r3
 8001912:	371c      	adds	r7, #28
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	40021000 	.word	0x40021000
 8001920:	007a1200 	.word	0x007a1200
 8001924:	080019ec 	.word	0x080019ec
 8001928:	080019fc 	.word	0x080019fc
 800192c:	003d0900 	.word	0x003d0900

08001930 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001938:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <RCC_Delay+0x34>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <RCC_Delay+0x38>)
 800193e:	fba2 2303 	umull	r2, r3, r2, r3
 8001942:	0a5b      	lsrs	r3, r3, #9
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	fb02 f303 	mul.w	r3, r2, r3
 800194a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800194c:	bf00      	nop
  }
  while (Delay --);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	1e5a      	subs	r2, r3, #1
 8001952:	60fa      	str	r2, [r7, #12]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d1f9      	bne.n	800194c <RCC_Delay+0x1c>
}
 8001958:	bf00      	nop
 800195a:	bf00      	nop
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr
 8001964:	20000000 	.word	0x20000000
 8001968:	10624dd3 	.word	0x10624dd3

0800196c <__libc_init_array>:
 800196c:	b570      	push	{r4, r5, r6, lr}
 800196e:	2600      	movs	r6, #0
 8001970:	4d0c      	ldr	r5, [pc, #48]	; (80019a4 <__libc_init_array+0x38>)
 8001972:	4c0d      	ldr	r4, [pc, #52]	; (80019a8 <__libc_init_array+0x3c>)
 8001974:	1b64      	subs	r4, r4, r5
 8001976:	10a4      	asrs	r4, r4, #2
 8001978:	42a6      	cmp	r6, r4
 800197a:	d109      	bne.n	8001990 <__libc_init_array+0x24>
 800197c:	f000 f822 	bl	80019c4 <_init>
 8001980:	2600      	movs	r6, #0
 8001982:	4d0a      	ldr	r5, [pc, #40]	; (80019ac <__libc_init_array+0x40>)
 8001984:	4c0a      	ldr	r4, [pc, #40]	; (80019b0 <__libc_init_array+0x44>)
 8001986:	1b64      	subs	r4, r4, r5
 8001988:	10a4      	asrs	r4, r4, #2
 800198a:	42a6      	cmp	r6, r4
 800198c:	d105      	bne.n	800199a <__libc_init_array+0x2e>
 800198e:	bd70      	pop	{r4, r5, r6, pc}
 8001990:	f855 3b04 	ldr.w	r3, [r5], #4
 8001994:	4798      	blx	r3
 8001996:	3601      	adds	r6, #1
 8001998:	e7ee      	b.n	8001978 <__libc_init_array+0xc>
 800199a:	f855 3b04 	ldr.w	r3, [r5], #4
 800199e:	4798      	blx	r3
 80019a0:	3601      	adds	r6, #1
 80019a2:	e7f2      	b.n	800198a <__libc_init_array+0x1e>
 80019a4:	08001a00 	.word	0x08001a00
 80019a8:	08001a00 	.word	0x08001a00
 80019ac:	08001a00 	.word	0x08001a00
 80019b0:	08001a04 	.word	0x08001a04

080019b4 <memset>:
 80019b4:	4603      	mov	r3, r0
 80019b6:	4402      	add	r2, r0
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d100      	bne.n	80019be <memset+0xa>
 80019bc:	4770      	bx	lr
 80019be:	f803 1b01 	strb.w	r1, [r3], #1
 80019c2:	e7f9      	b.n	80019b8 <memset+0x4>

080019c4 <_init>:
 80019c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019c6:	bf00      	nop
 80019c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019ca:	bc08      	pop	{r3}
 80019cc:	469e      	mov	lr, r3
 80019ce:	4770      	bx	lr

080019d0 <_fini>:
 80019d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019d2:	bf00      	nop
 80019d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019d6:	bc08      	pop	{r3}
 80019d8:	469e      	mov	lr, r3
 80019da:	4770      	bx	lr
